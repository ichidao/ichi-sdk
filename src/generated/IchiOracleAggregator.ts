/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IchiOracleAggregatorInterface extends utils.Interface {
  functions: {
    "ICHI()": FunctionFragment;
    "ICHIPrice()": FunctionFragment;
    "MAX_PRICE_DEVIATION()": FunctionFragment;
    "MIN_PRICE_DEVIATION()": FunctionFragment;
    "chainlinks(address,uint256)": FunctionFragment;
    "maxPriceDeviations(address)": FunctionFragment;
    "oracleCount(address)": FunctionFragment;
    "oracles(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairs(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOracles(address,uint256,address[],address[],address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "xICHI()": FunctionFragment;
    "xICHIPrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ICHI"
      | "ICHIPrice"
      | "MAX_PRICE_DEVIATION"
      | "MIN_PRICE_DEVIATION"
      | "chainlinks"
      | "maxPriceDeviations"
      | "oracleCount"
      | "oracles"
      | "owner"
      | "pairs"
      | "renounceOwnership"
      | "setOracles"
      | "transferOwnership"
      | "xICHI"
      | "xICHIPrice"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ICHI", values?: undefined): string;
  encodeFunctionData(functionFragment: "ICHIPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_DEVIATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PRICE_DEVIATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinks",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceDeviations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOracles",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "xICHI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xICHIPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ICHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ICHIPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DEVIATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PRICE_DEVIATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainlinks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceDeviations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xICHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xICHIPrice", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface IchiOracleAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IchiOracleAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ICHI(overrides?: CallOverrides): Promise<[string]>;

    ICHIPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    MAX_PRICE_DEVIATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_PRICE_DEVIATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainlinks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    maxPriceDeviations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracleCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracles(
      token: PromiseOrValue<string>,
      maxPriceDeviation: PromiseOrValue<BigNumberish>,
      oracles_: PromiseOrValue<string>[],
      pairs_: PromiseOrValue<string>[],
      chainlinks_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    xICHI(overrides?: CallOverrides): Promise<[string]>;

    xICHIPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;
  };

  ICHI(overrides?: CallOverrides): Promise<string>;

  ICHIPrice(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PRICE_DEVIATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_PRICE_DEVIATION(overrides?: CallOverrides): Promise<BigNumber>;

  chainlinks(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  maxPriceDeviations(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracleCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracles(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairs(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracles(
    token: PromiseOrValue<string>,
    maxPriceDeviation: PromiseOrValue<BigNumberish>,
    oracles_: PromiseOrValue<string>[],
    pairs_: PromiseOrValue<string>[],
    chainlinks_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  xICHI(overrides?: CallOverrides): Promise<string>;

  xICHIPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ICHI(overrides?: CallOverrides): Promise<string>;

    ICHIPrice(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DEVIATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PRICE_DEVIATION(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    maxPriceDeviations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setOracles(
      token: PromiseOrValue<string>,
      maxPriceDeviation: PromiseOrValue<BigNumberish>,
      oracles_: PromiseOrValue<string>[],
      pairs_: PromiseOrValue<string>[],
      chainlinks_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    xICHI(overrides?: CallOverrides): Promise<string>;

    xICHIPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ICHI(overrides?: CallOverrides): Promise<BigNumber>;

    ICHIPrice(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DEVIATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PRICE_DEVIATION(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPriceDeviations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracles(
      token: PromiseOrValue<string>,
      maxPriceDeviation: PromiseOrValue<BigNumberish>,
      oracles_: PromiseOrValue<string>[],
      pairs_: PromiseOrValue<string>[],
      chainlinks_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    xICHI(overrides?: CallOverrides): Promise<BigNumber>;

    xICHIPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ICHI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ICHIPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PRICE_DEVIATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_PRICE_DEVIATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlinks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceDeviations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracles(
      token: PromiseOrValue<string>,
      maxPriceDeviation: PromiseOrValue<BigNumberish>,
      oracles_: PromiseOrValue<string>[],
      pairs_: PromiseOrValue<string>[],
      chainlinks_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    xICHI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xICHIPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
