/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type LowHighPositionStruct = {
  baseLo: PromiseOrValue<BigNumberish>;
  baseUp: PromiseOrValue<BigNumberish>;
  limitLo: PromiseOrValue<BigNumberish>;
  limitUp: PromiseOrValue<BigNumberish>;
};

export type LowHighPositionStructOutput = [number, number, number, number] & {
  baseLo: number;
  baseUp: number;
  limitLo: number;
  limitUp: number;
};

export type PositionsStruct = {
  firstLo: PromiseOrValue<BigNumberish>;
  firstUp: PromiseOrValue<BigNumberish>;
  secondLo: PromiseOrValue<BigNumberish>;
  secondUp: PromiseOrValue<BigNumberish>;
};

export type PositionsStructOutput = [number, number, number, number] & {
  firstLo: number;
  firstUp: number;
  secondLo: number;
  secondUp: number;
};

export interface Rebalancing_index_v3Interface extends utils.Interface {
  functions: {
    "CONCENTRATION_BASE()": FunctionFragment;
    "GAS_DELAY()": FunctionFragment;
    "MIN_PRICE_CHANGE()": FunctionFragment;
    "_currentPosition(address)": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "concentrationMultiplier()": FunctionFragment;
    "concentrationPct()": FunctionFragment;
    "currentVolatility()": FunctionFragment;
    "depositTokenRatio()": FunctionFragment;
    "executionDelay()": FunctionFragment;
    "extremeVolatility()": FunctionFragment;
    "gasOracle()": FunctionFragment;
    "gasTolerance()": FunctionFragment;
    "gnosis()": FunctionFragment;
    "highGasStart()": FunctionFragment;
    "lastRebalance()": FunctionFragment;
    "maxConcentrationPct()": FunctionFragment;
    "maxPriceOracle()": FunctionFragment;
    "minConcentrationPct()": FunctionFragment;
    "minDtr()": FunctionFragment;
    "minTimeBetweenRebalances()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingDepositsPct()": FunctionFragment;
    "pendingDepositsRatio()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "poolPrices()": FunctionFragment;
    "priceChange()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "rebalanceInitiation()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setConcentrationMultiplier(uint256)": FunctionFragment;
    "setExecutionDelay(uint256)": FunctionFragment;
    "setExtremeVolatility(uint256)": FunctionFragment;
    "setGasOracle(address)": FunctionFragment;
    "setGasTolerance(uint256)": FunctionFragment;
    "setMaxConcentrationPct(uint256)": FunctionFragment;
    "setMaxPriceOracle(address)": FunctionFragment;
    "setMinConcentrationPct(uint256)": FunctionFragment;
    "setMinDtr(uint256)": FunctionFragment;
    "setMinTimeBetweenRebalances(uint256)": FunctionFragment;
    "setPendingDepositsPct(uint256)": FunctionFragment;
    "setTwapFast(uint32)": FunctionFragment;
    "simulate()": FunctionFragment;
    "someVolatility()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "twapFast()": FunctionFragment;
    "unpause()": FunctionFragment;
    "vault()": FunctionFragment;
    "vaultAmounts()": FunctionFragment;
    "vaultSummary()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONCENTRATION_BASE"
      | "GAS_DELAY"
      | "MIN_PRICE_CHANGE"
      | "_currentPosition"
      | "checkUpkeep"
      | "concentrationMultiplier"
      | "concentrationPct"
      | "currentVolatility"
      | "depositTokenRatio"
      | "executionDelay"
      | "extremeVolatility"
      | "gasOracle"
      | "gasTolerance"
      | "gnosis"
      | "highGasStart"
      | "lastRebalance"
      | "maxConcentrationPct"
      | "maxPriceOracle"
      | "minConcentrationPct"
      | "minDtr"
      | "minTimeBetweenRebalances"
      | "owner"
      | "pause"
      | "paused"
      | "pendingDepositsPct"
      | "pendingDepositsRatio"
      | "performUpkeep"
      | "poolPrices"
      | "priceChange"
      | "rebalance"
      | "rebalanceInitiation"
      | "renounceOwnership"
      | "setConcentrationMultiplier"
      | "setExecutionDelay"
      | "setExtremeVolatility"
      | "setGasOracle"
      | "setGasTolerance"
      | "setMaxConcentrationPct"
      | "setMaxPriceOracle"
      | "setMinConcentrationPct"
      | "setMinDtr"
      | "setMinTimeBetweenRebalances"
      | "setPendingDepositsPct"
      | "setTwapFast"
      | "simulate"
      | "someVolatility"
      | "transferOwnership"
      | "twapFast"
      | "unpause"
      | "vault"
      | "vaultAmounts"
      | "vaultSummary"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONCENTRATION_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GAS_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_PRICE_CHANGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_currentPosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "concentrationMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "concentrationPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentVolatility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extremeVolatility",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gnosis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "highGasStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRebalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxConcentrationPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minConcentrationPct",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minDtr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minTimeBetweenRebalances",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingDepositsPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDepositsRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolPrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceChange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceInitiation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConcentrationMultiplier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtremeVolatility",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasTolerance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxConcentrationPct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinConcentrationPct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDtr",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTimeBetweenRebalances",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingDepositsPct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapFast",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "simulate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "someVolatility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "twapFast", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultSummary",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CONCENTRATION_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GAS_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PRICE_CHANGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_currentPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "concentrationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "concentrationPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extremeVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gnosis", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highGasStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxConcentrationPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minConcentrationPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minDtr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minTimeBetweenRebalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDepositsPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDepositsRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceInitiation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConcentrationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtremeVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxConcentrationPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinConcentrationPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinDtr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinTimeBetweenRebalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingDepositsPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapFast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "someVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twapFast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultSummary",
    data: BytesLike
  ): Result;

  events: {
    "DeployRebalanceStrategy(address,address)": EventFragment;
    "HighGas(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RebalanceAction(address,uint8,uint256,bool,uint256,uint256)": EventFragment;
    "SetConcentrationMultiplier(address,uint256)": EventFragment;
    "SetExecutionDelay(address,uint256)": EventFragment;
    "SetExtremeVolatility(address,uint256)": EventFragment;
    "SetGasOracle(address,address)": EventFragment;
    "SetGasTolerance(address,uint256)": EventFragment;
    "SetMaxConcentrationPct(address,uint256)": EventFragment;
    "SetMaxPriceOracle(address,address)": EventFragment;
    "SetMinConcentrationPct(address,uint256)": EventFragment;
    "SetMinDtr(address,uint256)": EventFragment;
    "SetMinTimeBetweenRebalances(address,uint256)": EventFragment;
    "SetPendingDepositsPct(address,uint256)": EventFragment;
    "SetTwapFast(address,uint32)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployRebalanceStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighGas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetConcentrationMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetExecutionDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetExtremeVolatility"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasTolerance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxConcentrationPct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxPriceOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinConcentrationPct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinDtr"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetMinTimeBetweenRebalances"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPendingDepositsPct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTwapFast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface DeployRebalanceStrategyEventObject {
  sender: string;
  vault: string;
}
export type DeployRebalanceStrategyEvent = TypedEvent<
  [string, string],
  DeployRebalanceStrategyEventObject
>;

export type DeployRebalanceStrategyEventFilter =
  TypedEventFilter<DeployRebalanceStrategyEvent>;

export interface HighGasEventObject {
  sender: string;
  gasPrice: BigNumber;
  highGasStarted: BigNumber;
}
export type HighGasEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  HighGasEventObject
>;

export type HighGasEventFilter = TypedEventFilter<HighGasEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RebalanceActionEventObject {
  sender: string;
  action: number;
  pendingRatio: BigNumber;
  missingData: boolean;
  lastPrice: BigNumber;
  currentPrice: BigNumber;
}
export type RebalanceActionEvent = TypedEvent<
  [string, number, BigNumber, boolean, BigNumber, BigNumber],
  RebalanceActionEventObject
>;

export type RebalanceActionEventFilter = TypedEventFilter<RebalanceActionEvent>;

export interface SetConcentrationMultiplierEventObject {
  sender: string;
  concentrationMultiplier: BigNumber;
}
export type SetConcentrationMultiplierEvent = TypedEvent<
  [string, BigNumber],
  SetConcentrationMultiplierEventObject
>;

export type SetConcentrationMultiplierEventFilter =
  TypedEventFilter<SetConcentrationMultiplierEvent>;

export interface SetExecutionDelayEventObject {
  sender: string;
  executionDelay: BigNumber;
}
export type SetExecutionDelayEvent = TypedEvent<
  [string, BigNumber],
  SetExecutionDelayEventObject
>;

export type SetExecutionDelayEventFilter =
  TypedEventFilter<SetExecutionDelayEvent>;

export interface SetExtremeVolatilityEventObject {
  sender: string;
  extremeVolatility: BigNumber;
}
export type SetExtremeVolatilityEvent = TypedEvent<
  [string, BigNumber],
  SetExtremeVolatilityEventObject
>;

export type SetExtremeVolatilityEventFilter =
  TypedEventFilter<SetExtremeVolatilityEvent>;

export interface SetGasOracleEventObject {
  sender: string;
  gasOracle: string;
}
export type SetGasOracleEvent = TypedEvent<
  [string, string],
  SetGasOracleEventObject
>;

export type SetGasOracleEventFilter = TypedEventFilter<SetGasOracleEvent>;

export interface SetGasToleranceEventObject {
  sender: string;
  gasTolerance: BigNumber;
}
export type SetGasToleranceEvent = TypedEvent<
  [string, BigNumber],
  SetGasToleranceEventObject
>;

export type SetGasToleranceEventFilter = TypedEventFilter<SetGasToleranceEvent>;

export interface SetMaxConcentrationPctEventObject {
  sender: string;
  maxConcentrationPct: BigNumber;
}
export type SetMaxConcentrationPctEvent = TypedEvent<
  [string, BigNumber],
  SetMaxConcentrationPctEventObject
>;

export type SetMaxConcentrationPctEventFilter =
  TypedEventFilter<SetMaxConcentrationPctEvent>;

export interface SetMaxPriceOracleEventObject {
  sender: string;
  maxPriceOracle: string;
}
export type SetMaxPriceOracleEvent = TypedEvent<
  [string, string],
  SetMaxPriceOracleEventObject
>;

export type SetMaxPriceOracleEventFilter =
  TypedEventFilter<SetMaxPriceOracleEvent>;

export interface SetMinConcentrationPctEventObject {
  sender: string;
  minConcentrationPct: BigNumber;
}
export type SetMinConcentrationPctEvent = TypedEvent<
  [string, BigNumber],
  SetMinConcentrationPctEventObject
>;

export type SetMinConcentrationPctEventFilter =
  TypedEventFilter<SetMinConcentrationPctEvent>;

export interface SetMinDtrEventObject {
  sender: string;
  minDtr: BigNumber;
}
export type SetMinDtrEvent = TypedEvent<
  [string, BigNumber],
  SetMinDtrEventObject
>;

export type SetMinDtrEventFilter = TypedEventFilter<SetMinDtrEvent>;

export interface SetMinTimeBetweenRebalancesEventObject {
  sender: string;
  minTimeBetweenRebalances: BigNumber;
}
export type SetMinTimeBetweenRebalancesEvent = TypedEvent<
  [string, BigNumber],
  SetMinTimeBetweenRebalancesEventObject
>;

export type SetMinTimeBetweenRebalancesEventFilter =
  TypedEventFilter<SetMinTimeBetweenRebalancesEvent>;

export interface SetPendingDepositsPctEventObject {
  sender: string;
  pendingDepositsPct: BigNumber;
}
export type SetPendingDepositsPctEvent = TypedEvent<
  [string, BigNumber],
  SetPendingDepositsPctEventObject
>;

export type SetPendingDepositsPctEventFilter =
  TypedEventFilter<SetPendingDepositsPctEvent>;

export interface SetTwapFastEventObject {
  sender: string;
  twapFast: number;
}
export type SetTwapFastEvent = TypedEvent<
  [string, number],
  SetTwapFastEventObject
>;

export type SetTwapFastEventFilter = TypedEventFilter<SetTwapFastEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Rebalancing_index_v3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Rebalancing_index_v3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONCENTRATION_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    GAS_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_PRICE_CHANGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    _currentPosition(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [LowHighPositionStructOutput] & { pos: LowHighPositionStructOutput }
    >;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    concentrationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    concentrationPct(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pct: BigNumber }>;

    currentVolatility(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { volatility: BigNumber }>;

    depositTokenRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dtr: BigNumber }>;

    executionDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    extremeVolatility(overrides?: CallOverrides): Promise<[BigNumber]>;

    gasOracle(overrides?: CallOverrides): Promise<[string]>;

    gasTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    gnosis(overrides?: CallOverrides): Promise<[string]>;

    highGasStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRebalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxConcentrationPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    minConcentrationPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDtr(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTimeBetweenRebalances(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingDepositsPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingDepositsRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolPrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentPrice_: BigNumber;
        twapFast_: BigNumber;
      }
    >;

    priceChange(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { priceChange_: BigNumber }>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebalanceInitiation(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConcentrationMultiplier(
      _concentrationMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExecutionDelay(
      _executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExtremeVolatility(
      _extremeVolatility: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasOracle(
      _gasOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasTolerance(
      _gasTolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxConcentrationPct(
      _maxConcentrationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceOracle(
      _maxPriceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinConcentrationPct(
      _minConcentrationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinDtr(
      _minDtr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinTimeBetweenRebalances(
      _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingDepositsPct(
      _pendingDepositsPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTwapFast(
      _twapFast: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simulate(
      overrides?: CallOverrides
    ): Promise<[PositionsStructOutput] & { newPos: PositionsStructOutput }>;

    someVolatility(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    twapFast(overrides?: CallOverrides): Promise<[number]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    vaultAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositTotal_: BigNumber;
        scarceTotal_: BigNumber;
      }
    >;

    vaultSummary(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        vault_: string;
        baseToken_: string;
        scarceToken_: string;
      }
    >;
  };

  CONCENTRATION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  GAS_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_PRICE_CHANGE(overrides?: CallOverrides): Promise<BigNumber>;

  _currentPosition(
    _vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LowHighPositionStructOutput>;

  checkUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

  concentrationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  concentrationPct(overrides?: CallOverrides): Promise<BigNumber>;

  currentVolatility(overrides?: CallOverrides): Promise<BigNumber>;

  depositTokenRatio(overrides?: CallOverrides): Promise<BigNumber>;

  executionDelay(overrides?: CallOverrides): Promise<BigNumber>;

  extremeVolatility(overrides?: CallOverrides): Promise<BigNumber>;

  gasOracle(overrides?: CallOverrides): Promise<string>;

  gasTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  gnosis(overrides?: CallOverrides): Promise<string>;

  highGasStart(overrides?: CallOverrides): Promise<BigNumber>;

  lastRebalance(overrides?: CallOverrides): Promise<BigNumber>;

  maxConcentrationPct(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceOracle(overrides?: CallOverrides): Promise<string>;

  minConcentrationPct(overrides?: CallOverrides): Promise<BigNumber>;

  minDtr(overrides?: CallOverrides): Promise<BigNumber>;

  minTimeBetweenRebalances(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingDepositsPct(overrides?: CallOverrides): Promise<BigNumber>;

  pendingDepositsRatio(overrides?: CallOverrides): Promise<BigNumber>;

  performUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolPrices(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { currentPrice_: BigNumber; twapFast_: BigNumber }
  >;

  priceChange(overrides?: CallOverrides): Promise<BigNumber>;

  rebalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebalanceInitiation(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConcentrationMultiplier(
    _concentrationMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExecutionDelay(
    _executionDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExtremeVolatility(
    _extremeVolatility: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasOracle(
    _gasOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasTolerance(
    _gasTolerance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxConcentrationPct(
    _maxConcentrationPct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceOracle(
    _maxPriceOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinConcentrationPct(
    _minConcentrationPct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinDtr(
    _minDtr: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinTimeBetweenRebalances(
    _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingDepositsPct(
    _pendingDepositsPct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTwapFast(
    _twapFast: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simulate(overrides?: CallOverrides): Promise<PositionsStructOutput>;

  someVolatility(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  twapFast(overrides?: CallOverrides): Promise<number>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  vaultAmounts(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      depositTotal_: BigNumber;
      scarceTotal_: BigNumber;
    }
  >;

  vaultSummary(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      vault_: string;
      baseToken_: string;
      scarceToken_: string;
    }
  >;

  callStatic: {
    CONCENTRATION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    GAS_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PRICE_CHANGE(overrides?: CallOverrides): Promise<BigNumber>;

    _currentPosition(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LowHighPositionStructOutput>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    concentrationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    concentrationPct(overrides?: CallOverrides): Promise<BigNumber>;

    currentVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokenRatio(overrides?: CallOverrides): Promise<BigNumber>;

    executionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    extremeVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    gasOracle(overrides?: CallOverrides): Promise<string>;

    gasTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    gnosis(overrides?: CallOverrides): Promise<string>;

    highGasStart(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebalance(overrides?: CallOverrides): Promise<BigNumber>;

    maxConcentrationPct(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceOracle(overrides?: CallOverrides): Promise<string>;

    minConcentrationPct(overrides?: CallOverrides): Promise<BigNumber>;

    minDtr(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeBetweenRebalances(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingDepositsPct(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDepositsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolPrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentPrice_: BigNumber;
        twapFast_: BigNumber;
      }
    >;

    priceChange(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    rebalanceInitiation(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setConcentrationMultiplier(
      _concentrationMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExecutionDelay(
      _executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExtremeVolatility(
      _extremeVolatility: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasOracle(
      _gasOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasTolerance(
      _gasTolerance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxConcentrationPct(
      _maxConcentrationPct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceOracle(
      _maxPriceOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinConcentrationPct(
      _minConcentrationPct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDtr(
      _minDtr: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTimeBetweenRebalances(
      _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingDepositsPct(
      _pendingDepositsPct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapFast(
      _twapFast: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    simulate(overrides?: CallOverrides): Promise<PositionsStructOutput>;

    someVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    twapFast(overrides?: CallOverrides): Promise<number>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    vaultAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositTotal_: BigNumber;
        scarceTotal_: BigNumber;
      }
    >;

    vaultSummary(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        vault_: string;
        baseToken_: string;
        scarceToken_: string;
      }
    >;
  };

  filters: {
    "DeployRebalanceStrategy(address,address)"(
      sender?: PromiseOrValue<string> | null,
      vault?: PromiseOrValue<string> | null
    ): DeployRebalanceStrategyEventFilter;
    DeployRebalanceStrategy(
      sender?: PromiseOrValue<string> | null,
      vault?: PromiseOrValue<string> | null
    ): DeployRebalanceStrategyEventFilter;

    "HighGas(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      gasPrice?: null,
      highGasStarted?: null
    ): HighGasEventFilter;
    HighGas(
      sender?: PromiseOrValue<string> | null,
      gasPrice?: null,
      highGasStarted?: null
    ): HighGasEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RebalanceAction(address,uint8,uint256,bool,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      action?: null,
      pendingRatio?: null,
      missingData?: null,
      lastPrice?: null,
      currentPrice?: null
    ): RebalanceActionEventFilter;
    RebalanceAction(
      sender?: PromiseOrValue<string> | null,
      action?: null,
      pendingRatio?: null,
      missingData?: null,
      lastPrice?: null,
      currentPrice?: null
    ): RebalanceActionEventFilter;

    "SetConcentrationMultiplier(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      concentrationMultiplier?: null
    ): SetConcentrationMultiplierEventFilter;
    SetConcentrationMultiplier(
      sender?: PromiseOrValue<string> | null,
      concentrationMultiplier?: null
    ): SetConcentrationMultiplierEventFilter;

    "SetExecutionDelay(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      executionDelay?: null
    ): SetExecutionDelayEventFilter;
    SetExecutionDelay(
      sender?: PromiseOrValue<string> | null,
      executionDelay?: null
    ): SetExecutionDelayEventFilter;

    "SetExtremeVolatility(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      extremeVolatility?: null
    ): SetExtremeVolatilityEventFilter;
    SetExtremeVolatility(
      sender?: PromiseOrValue<string> | null,
      extremeVolatility?: null
    ): SetExtremeVolatilityEventFilter;

    "SetGasOracle(address,address)"(
      sender?: PromiseOrValue<string> | null,
      gasOracle?: null
    ): SetGasOracleEventFilter;
    SetGasOracle(
      sender?: PromiseOrValue<string> | null,
      gasOracle?: null
    ): SetGasOracleEventFilter;

    "SetGasTolerance(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      gasTolerance?: null
    ): SetGasToleranceEventFilter;
    SetGasTolerance(
      sender?: PromiseOrValue<string> | null,
      gasTolerance?: null
    ): SetGasToleranceEventFilter;

    "SetMaxConcentrationPct(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      maxConcentrationPct?: null
    ): SetMaxConcentrationPctEventFilter;
    SetMaxConcentrationPct(
      sender?: PromiseOrValue<string> | null,
      maxConcentrationPct?: null
    ): SetMaxConcentrationPctEventFilter;

    "SetMaxPriceOracle(address,address)"(
      sender?: PromiseOrValue<string> | null,
      maxPriceOracle?: null
    ): SetMaxPriceOracleEventFilter;
    SetMaxPriceOracle(
      sender?: PromiseOrValue<string> | null,
      maxPriceOracle?: null
    ): SetMaxPriceOracleEventFilter;

    "SetMinConcentrationPct(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      minConcentrationPct?: null
    ): SetMinConcentrationPctEventFilter;
    SetMinConcentrationPct(
      sender?: PromiseOrValue<string> | null,
      minConcentrationPct?: null
    ): SetMinConcentrationPctEventFilter;

    "SetMinDtr(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      minDtr?: null
    ): SetMinDtrEventFilter;
    SetMinDtr(
      sender?: PromiseOrValue<string> | null,
      minDtr?: null
    ): SetMinDtrEventFilter;

    "SetMinTimeBetweenRebalances(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      minTimeBetweenRebalances?: null
    ): SetMinTimeBetweenRebalancesEventFilter;
    SetMinTimeBetweenRebalances(
      sender?: PromiseOrValue<string> | null,
      minTimeBetweenRebalances?: null
    ): SetMinTimeBetweenRebalancesEventFilter;

    "SetPendingDepositsPct(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      pendingDepositsPct?: null
    ): SetPendingDepositsPctEventFilter;
    SetPendingDepositsPct(
      sender?: PromiseOrValue<string> | null,
      pendingDepositsPct?: null
    ): SetPendingDepositsPctEventFilter;

    "SetTwapFast(address,uint32)"(
      sender?: PromiseOrValue<string> | null,
      twapFast?: null
    ): SetTwapFastEventFilter;
    SetTwapFast(
      sender?: PromiseOrValue<string> | null,
      twapFast?: null
    ): SetTwapFastEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    CONCENTRATION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    GAS_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PRICE_CHANGE(overrides?: CallOverrides): Promise<BigNumber>;

    _currentPosition(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    concentrationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    concentrationPct(overrides?: CallOverrides): Promise<BigNumber>;

    currentVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokenRatio(overrides?: CallOverrides): Promise<BigNumber>;

    executionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    extremeVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    gasOracle(overrides?: CallOverrides): Promise<BigNumber>;

    gasTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    gnosis(overrides?: CallOverrides): Promise<BigNumber>;

    highGasStart(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebalance(overrides?: CallOverrides): Promise<BigNumber>;

    maxConcentrationPct(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    minConcentrationPct(overrides?: CallOverrides): Promise<BigNumber>;

    minDtr(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeBetweenRebalances(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDepositsPct(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDepositsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolPrices(overrides?: CallOverrides): Promise<BigNumber>;

    priceChange(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebalanceInitiation(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConcentrationMultiplier(
      _concentrationMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExecutionDelay(
      _executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExtremeVolatility(
      _extremeVolatility: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasOracle(
      _gasOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasTolerance(
      _gasTolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxConcentrationPct(
      _maxConcentrationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPriceOracle(
      _maxPriceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinConcentrationPct(
      _minConcentrationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinDtr(
      _minDtr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinTimeBetweenRebalances(
      _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingDepositsPct(
      _pendingDepositsPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTwapFast(
      _twapFast: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simulate(overrides?: CallOverrides): Promise<BigNumber>;

    someVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    twapFast(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    vaultAmounts(overrides?: CallOverrides): Promise<BigNumber>;

    vaultSummary(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONCENTRATION_BASE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GAS_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_PRICE_CHANGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _currentPosition(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    concentrationMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    concentrationPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentVolatility(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTokenRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executionDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extremeVolatility(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasTolerance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gnosis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highGasStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRebalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxConcentrationPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minConcentrationPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDtr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTimeBetweenRebalances(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDepositsPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingDepositsRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolPrices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceChange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebalanceInitiation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConcentrationMultiplier(
      _concentrationMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExecutionDelay(
      _executionDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExtremeVolatility(
      _extremeVolatility: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasOracle(
      _gasOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasTolerance(
      _gasTolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxConcentrationPct(
      _maxConcentrationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceOracle(
      _maxPriceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinConcentrationPct(
      _minConcentrationPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinDtr(
      _minDtr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinTimeBetweenRebalances(
      _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingDepositsPct(
      _pendingDepositsPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTwapFast(
      _twapFast: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simulate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    someVolatility(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    twapFast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultAmounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultSummary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
