/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IchiBntInterface extends utils.Interface {
  functions: {
    "acceptAnchorOwnership()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "acceptTokenOwnership()": FunctionFragment;
    "addLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "addLiquidity(address[],uint256[],uint256)": FunctionFragment;
    "addLiquidityCost(address[],uint256,uint256)": FunctionFragment;
    "addLiquidityReturn(address,uint256)": FunctionFragment;
    "addReserve(address,uint32)": FunctionFragment;
    "anchor()": FunctionFragment;
    "averageRateInfo()": FunctionFragment;
    "connectorTokenCount()": FunctionFragment;
    "connectorTokens(uint256)": FunctionFragment;
    "connectors(address)": FunctionFragment;
    "conversionFee()": FunctionFragment;
    "convert(address,address,uint256,address,address)": FunctionFragment;
    "converterType()": FunctionFragment;
    "getConnectorBalance(address)": FunctionFragment;
    "getReturn(address,address,uint256)": FunctionFragment;
    "isActive()": FunctionFragment;
    "isV28OrHigher()": FunctionFragment;
    "maxConversionFee()": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onlyOwnerCanUpdateRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "prevRegistry()": FunctionFragment;
    "recentAverageRate(address)": FunctionFragment;
    "registry()": FunctionFragment;
    "removeLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(uint256,address[],uint256[])": FunctionFragment;
    "removeLiquidityReturn(uint256,address[])": FunctionFragment;
    "reserveBalance(address)": FunctionFragment;
    "reserveBalances()": FunctionFragment;
    "reserveTokenCount()": FunctionFragment;
    "reserveTokens()": FunctionFragment;
    "reserveWeight(address)": FunctionFragment;
    "restoreRegistry()": FunctionFragment;
    "restrictRegistryUpdate(bool)": FunctionFragment;
    "setConversionFee(uint32)": FunctionFragment;
    "targetAmountAndFee(address,address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferAnchorOwnership(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTokenOwnership(address)": FunctionFragment;
    "updateRegistry()": FunctionFragment;
    "upgrade()": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawETH(address)": FunctionFragment;
    "withdrawTokens(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptAnchorOwnership"
      | "acceptOwnership"
      | "acceptTokenOwnership"
      | "addLiquidity(uint256,uint256,uint256)"
      | "addLiquidity(address[],uint256[],uint256)"
      | "addLiquidityCost"
      | "addLiquidityReturn"
      | "addReserve"
      | "anchor"
      | "averageRateInfo"
      | "connectorTokenCount"
      | "connectorTokens"
      | "connectors"
      | "conversionFee"
      | "convert"
      | "converterType"
      | "getConnectorBalance"
      | "getReturn"
      | "isActive"
      | "isV28OrHigher"
      | "maxConversionFee"
      | "newOwner"
      | "onlyOwnerCanUpdateRegistry"
      | "owner"
      | "prevRegistry"
      | "recentAverageRate"
      | "registry"
      | "removeLiquidity(uint256,uint256,uint256)"
      | "removeLiquidity(uint256,address[],uint256[])"
      | "removeLiquidityReturn"
      | "reserveBalance"
      | "reserveBalances"
      | "reserveTokenCount"
      | "reserveTokens"
      | "reserveWeight"
      | "restoreRegistry"
      | "restrictRegistryUpdate"
      | "setConversionFee"
      | "targetAmountAndFee"
      | "token"
      | "transferAnchorOwnership"
      | "transferOwnership"
      | "transferTokenOwnership"
      | "updateRegistry"
      | "upgrade"
      | "version"
      | "withdrawETH"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptAnchorOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTokenOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity(address[],uint256[],uint256)",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityCost",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityReturn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addReserve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "anchor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "averageRateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "connectors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "conversionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "converterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConnectorBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReturn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isV28OrHigher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxConversionFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recentAverageRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity(uint256,address[],uint256[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityReturn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveWeight",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictRegistryUpdate",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConversionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "targetAmountAndFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAnchorOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAnchorOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity(address[],uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anchor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "averageRateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "converterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConnectorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReturn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isV28OrHigher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxConversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recentAverageRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity(uint256,address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictRegistryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetAmountAndFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAnchorOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "Activation(uint16,address,bool)": EventFragment;
    "Conversion(address,address,address,uint256,uint256,int256)": EventFragment;
    "ConversionFeeUpdate(uint32,uint32)": EventFragment;
    "LiquidityAdded(address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityRemoved(address,address,uint256,uint256,uint256)": EventFragment;
    "OwnerUpdate(address,address)": EventFragment;
    "TokenRateUpdate(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Activation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Conversion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConversionFeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRateUpdate"): EventFragment;
}

export interface ActivationEventObject {
  _type: number;
  _anchor: string;
  _activated: boolean;
}
export type ActivationEvent = TypedEvent<
  [number, string, boolean],
  ActivationEventObject
>;

export type ActivationEventFilter = TypedEventFilter<ActivationEvent>;

export interface ConversionEventObject {
  _fromToken: string;
  _toToken: string;
  _trader: string;
  _amount: BigNumber;
  _return: BigNumber;
  _conversionFee: BigNumber;
}
export type ConversionEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  ConversionEventObject
>;

export type ConversionEventFilter = TypedEventFilter<ConversionEvent>;

export interface ConversionFeeUpdateEventObject {
  _prevFee: number;
  _newFee: number;
}
export type ConversionFeeUpdateEvent = TypedEvent<
  [number, number],
  ConversionFeeUpdateEventObject
>;

export type ConversionFeeUpdateEventFilter =
  TypedEventFilter<ConversionFeeUpdateEvent>;

export interface LiquidityAddedEventObject {
  _provider: string;
  _reserveToken: string;
  _amount: BigNumber;
  _newBalance: BigNumber;
  _newSupply: BigNumber;
}
export type LiquidityAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface LiquidityRemovedEventObject {
  _provider: string;
  _reserveToken: string;
  _amount: BigNumber;
  _newBalance: BigNumber;
  _newSupply: BigNumber;
}
export type LiquidityRemovedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  LiquidityRemovedEventObject
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export interface OwnerUpdateEventObject {
  _prevOwner: string;
  _newOwner: string;
}
export type OwnerUpdateEvent = TypedEvent<
  [string, string],
  OwnerUpdateEventObject
>;

export type OwnerUpdateEventFilter = TypedEventFilter<OwnerUpdateEvent>;

export interface TokenRateUpdateEventObject {
  _token1: string;
  _token2: string;
  _rateN: BigNumber;
  _rateD: BigNumber;
}
export type TokenRateUpdateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TokenRateUpdateEventObject
>;

export type TokenRateUpdateEventFilter = TypedEventFilter<TokenRateUpdateEvent>;

export interface IchiBnt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IchiBntInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAnchorOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptTokenOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addLiquidity(uint256,uint256,uint256)"(
      _reserve1Amount: PromiseOrValue<BigNumberish>,
      _reserve2Amount: PromiseOrValue<BigNumberish>,
      _minReturn: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addLiquidity(address[],uint256[],uint256)"(
      _reserveTokens: PromiseOrValue<string>[],
      _reserveAmounts: PromiseOrValue<BigNumberish>[],
      _minReturn: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidityCost(
      _reserveTokens: PromiseOrValue<string>[],
      _reserveTokenIndex: PromiseOrValue<BigNumberish>,
      _reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    addLiquidityReturn(
      _reserveToken: PromiseOrValue<string>,
      _reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addReserve(
      _token: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    anchor(overrides?: CallOverrides): Promise<[string]>;

    averageRateInfo(overrides?: CallOverrides): Promise<[BigNumber]>;

    connectorTokenCount(overrides?: CallOverrides): Promise<[number]>;

    connectorTokens(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    connectors(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    conversionFee(overrides?: CallOverrides): Promise<[number]>;

    convert(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    converterType(overrides?: CallOverrides): Promise<[number]>;

    getConnectorBalance(
      _connectorToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReturn(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    isV28OrHigher(overrides?: CallOverrides): Promise<[boolean]>;

    maxConversionFee(overrides?: CallOverrides): Promise<[number]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prevRegistry(overrides?: CallOverrides): Promise<[string]>;

    recentAverageRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "removeLiquidity(uint256,uint256,uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      _reserve1MinReturn: PromiseOrValue<BigNumberish>,
      _reserve2MinReturn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeLiquidity(uint256,address[],uint256[])"(
      _amount: PromiseOrValue<BigNumberish>,
      _reserveTokens: PromiseOrValue<string>[],
      _reserveMinReturnAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityReturn(
      _amount: PromiseOrValue<BigNumberish>,
      _reserveTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    reserveBalance(
      _reserveToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    reserveTokenCount(overrides?: CallOverrides): Promise<[number]>;

    reserveTokens(overrides?: CallOverrides): Promise<[string[]]>;

    reserveWeight(
      _reserveToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    restoreRegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConversionFee(
      _conversionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    targetAmountAndFee(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferAnchorOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTokenOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;

    withdrawETH(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptAnchorOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptTokenOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addLiquidity(uint256,uint256,uint256)"(
    _reserve1Amount: PromiseOrValue<BigNumberish>,
    _reserve2Amount: PromiseOrValue<BigNumberish>,
    _minReturn: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addLiquidity(address[],uint256[],uint256)"(
    _reserveTokens: PromiseOrValue<string>[],
    _reserveAmounts: PromiseOrValue<BigNumberish>[],
    _minReturn: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidityCost(
    _reserveTokens: PromiseOrValue<string>[],
    _reserveTokenIndex: PromiseOrValue<BigNumberish>,
    _reserveAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  addLiquidityReturn(
    _reserveToken: PromiseOrValue<string>,
    _reserveAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addReserve(
    _token: PromiseOrValue<string>,
    _weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  anchor(overrides?: CallOverrides): Promise<string>;

  averageRateInfo(overrides?: CallOverrides): Promise<BigNumber>;

  connectorTokenCount(overrides?: CallOverrides): Promise<number>;

  connectorTokens(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  connectors(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

  conversionFee(overrides?: CallOverrides): Promise<number>;

  convert(
    _sourceToken: PromiseOrValue<string>,
    _targetToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _trader: PromiseOrValue<string>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  converterType(overrides?: CallOverrides): Promise<number>;

  getConnectorBalance(
    _connectorToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReturn(
    _sourceToken: PromiseOrValue<string>,
    _targetToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  isV28OrHigher(overrides?: CallOverrides): Promise<boolean>;

  maxConversionFee(overrides?: CallOverrides): Promise<number>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  prevRegistry(overrides?: CallOverrides): Promise<string>;

  recentAverageRate(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  registry(overrides?: CallOverrides): Promise<string>;

  "removeLiquidity(uint256,uint256,uint256)"(
    _amount: PromiseOrValue<BigNumberish>,
    _reserve1MinReturn: PromiseOrValue<BigNumberish>,
    _reserve2MinReturn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeLiquidity(uint256,address[],uint256[])"(
    _amount: PromiseOrValue<BigNumberish>,
    _reserveTokens: PromiseOrValue<string>[],
    _reserveMinReturnAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityReturn(
    _amount: PromiseOrValue<BigNumberish>,
    _reserveTokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  reserveBalance(
    _reserveToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  reserveTokenCount(overrides?: CallOverrides): Promise<number>;

  reserveTokens(overrides?: CallOverrides): Promise<string[]>;

  reserveWeight(
    _reserveToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  restoreRegistry(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  restrictRegistryUpdate(
    _onlyOwnerCanUpdateRegistry: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConversionFee(
    _conversionFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  targetAmountAndFee(
    _sourceToken: PromiseOrValue<string>,
    _targetToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  token(overrides?: CallOverrides): Promise<string>;

  transferAnchorOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTokenOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRegistry(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  withdrawETH(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAnchorOwnership(overrides?: CallOverrides): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptTokenOwnership(overrides?: CallOverrides): Promise<void>;

    "addLiquidity(uint256,uint256,uint256)"(
      _reserve1Amount: PromiseOrValue<BigNumberish>,
      _reserve2Amount: PromiseOrValue<BigNumberish>,
      _minReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(address[],uint256[],uint256)"(
      _reserveTokens: PromiseOrValue<string>[],
      _reserveAmounts: PromiseOrValue<BigNumberish>[],
      _minReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityCost(
      _reserveTokens: PromiseOrValue<string>[],
      _reserveTokenIndex: PromiseOrValue<BigNumberish>,
      _reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addLiquidityReturn(
      _reserveToken: PromiseOrValue<string>,
      _reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReserve(
      _token: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    anchor(overrides?: CallOverrides): Promise<string>;

    averageRateInfo(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokenCount(overrides?: CallOverrides): Promise<number>;

    connectorTokens(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    connectors(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    conversionFee(overrides?: CallOverrides): Promise<number>;

    convert(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    converterType(overrides?: CallOverrides): Promise<number>;

    getConnectorBalance(
      _connectorToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReturn(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    isV28OrHigher(overrides?: CallOverrides): Promise<boolean>;

    maxConversionFee(overrides?: CallOverrides): Promise<number>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    prevRegistry(overrides?: CallOverrides): Promise<string>;

    recentAverageRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    registry(overrides?: CallOverrides): Promise<string>;

    "removeLiquidity(uint256,uint256,uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      _reserve1MinReturn: PromiseOrValue<BigNumberish>,
      _reserve2MinReturn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "removeLiquidity(uint256,address[],uint256[])"(
      _amount: PromiseOrValue<BigNumberish>,
      _reserveTokens: PromiseOrValue<string>[],
      _reserveMinReturnAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    removeLiquidityReturn(
      _amount: PromiseOrValue<BigNumberish>,
      _reserveTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    reserveBalance(
      _reserveToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    reserveTokenCount(overrides?: CallOverrides): Promise<number>;

    reserveTokens(overrides?: CallOverrides): Promise<string[]>;

    reserveWeight(
      _reserveToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    restoreRegistry(overrides?: CallOverrides): Promise<void>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConversionFee(
      _conversionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    targetAmountAndFee(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    token(overrides?: CallOverrides): Promise<string>;

    transferAnchorOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(overrides?: CallOverrides): Promise<void>;

    upgrade(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;

    withdrawETH(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Activation(uint16,address,bool)"(
      _type?: PromiseOrValue<BigNumberish> | null,
      _anchor?: PromiseOrValue<string> | null,
      _activated?: PromiseOrValue<boolean> | null
    ): ActivationEventFilter;
    Activation(
      _type?: PromiseOrValue<BigNumberish> | null,
      _anchor?: PromiseOrValue<string> | null,
      _activated?: PromiseOrValue<boolean> | null
    ): ActivationEventFilter;

    "Conversion(address,address,address,uint256,uint256,int256)"(
      _fromToken?: PromiseOrValue<string> | null,
      _toToken?: PromiseOrValue<string> | null,
      _trader?: PromiseOrValue<string> | null,
      _amount?: null,
      _return?: null,
      _conversionFee?: null
    ): ConversionEventFilter;
    Conversion(
      _fromToken?: PromiseOrValue<string> | null,
      _toToken?: PromiseOrValue<string> | null,
      _trader?: PromiseOrValue<string> | null,
      _amount?: null,
      _return?: null,
      _conversionFee?: null
    ): ConversionEventFilter;

    "ConversionFeeUpdate(uint32,uint32)"(
      _prevFee?: null,
      _newFee?: null
    ): ConversionFeeUpdateEventFilter;
    ConversionFeeUpdate(
      _prevFee?: null,
      _newFee?: null
    ): ConversionFeeUpdateEventFilter;

    "LiquidityAdded(address,address,uint256,uint256,uint256)"(
      _provider?: PromiseOrValue<string> | null,
      _reserveToken?: PromiseOrValue<string> | null,
      _amount?: null,
      _newBalance?: null,
      _newSupply?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      _provider?: PromiseOrValue<string> | null,
      _reserveToken?: PromiseOrValue<string> | null,
      _amount?: null,
      _newBalance?: null,
      _newSupply?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(address,address,uint256,uint256,uint256)"(
      _provider?: PromiseOrValue<string> | null,
      _reserveToken?: PromiseOrValue<string> | null,
      _amount?: null,
      _newBalance?: null,
      _newSupply?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      _provider?: PromiseOrValue<string> | null,
      _reserveToken?: PromiseOrValue<string> | null,
      _amount?: null,
      _newBalance?: null,
      _newSupply?: null
    ): LiquidityRemovedEventFilter;

    "OwnerUpdate(address,address)"(
      _prevOwner?: PromiseOrValue<string> | null,
      _newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdateEventFilter;
    OwnerUpdate(
      _prevOwner?: PromiseOrValue<string> | null,
      _newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdateEventFilter;

    "TokenRateUpdate(address,address,uint256,uint256)"(
      _token1?: PromiseOrValue<string> | null,
      _token2?: PromiseOrValue<string> | null,
      _rateN?: null,
      _rateD?: null
    ): TokenRateUpdateEventFilter;
    TokenRateUpdate(
      _token1?: PromiseOrValue<string> | null,
      _token2?: PromiseOrValue<string> | null,
      _rateN?: null,
      _rateD?: null
    ): TokenRateUpdateEventFilter;
  };

  estimateGas: {
    acceptAnchorOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptTokenOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addLiquidity(uint256,uint256,uint256)"(
      _reserve1Amount: PromiseOrValue<BigNumberish>,
      _reserve2Amount: PromiseOrValue<BigNumberish>,
      _minReturn: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addLiquidity(address[],uint256[],uint256)"(
      _reserveTokens: PromiseOrValue<string>[],
      _reserveAmounts: PromiseOrValue<BigNumberish>[],
      _minReturn: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidityCost(
      _reserveTokens: PromiseOrValue<string>[],
      _reserveTokenIndex: PromiseOrValue<BigNumberish>,
      _reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityReturn(
      _reserveToken: PromiseOrValue<string>,
      _reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReserve(
      _token: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    anchor(overrides?: CallOverrides): Promise<BigNumber>;

    averageRateInfo(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokens(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectors(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conversionFee(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    converterType(overrides?: CallOverrides): Promise<BigNumber>;

    getConnectorBalance(
      _connectorToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReturn(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    isV28OrHigher(overrides?: CallOverrides): Promise<BigNumber>;

    maxConversionFee(overrides?: CallOverrides): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    recentAverageRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "removeLiquidity(uint256,uint256,uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      _reserve1MinReturn: PromiseOrValue<BigNumberish>,
      _reserve2MinReturn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeLiquidity(uint256,address[],uint256[])"(
      _amount: PromiseOrValue<BigNumberish>,
      _reserveTokens: PromiseOrValue<string>[],
      _reserveMinReturnAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidityReturn(
      _amount: PromiseOrValue<BigNumberish>,
      _reserveTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveBalance(
      _reserveToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveBalances(overrides?: CallOverrides): Promise<BigNumber>;

    reserveTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    reserveTokens(overrides?: CallOverrides): Promise<BigNumber>;

    reserveWeight(
      _reserveToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    restoreRegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConversionFee(
      _conversionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    targetAmountAndFee(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferAnchorOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTokenOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawETH(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAnchorOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptTokenOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint256,uint256,uint256)"(
      _reserve1Amount: PromiseOrValue<BigNumberish>,
      _reserve2Amount: PromiseOrValue<BigNumberish>,
      _minReturn: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address[],uint256[],uint256)"(
      _reserveTokens: PromiseOrValue<string>[],
      _reserveAmounts: PromiseOrValue<BigNumberish>[],
      _minReturn: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityCost(
      _reserveTokens: PromiseOrValue<string>[],
      _reserveTokenIndex: PromiseOrValue<BigNumberish>,
      _reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityReturn(
      _reserveToken: PromiseOrValue<string>,
      _reserveAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addReserve(
      _token: PromiseOrValue<string>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    anchor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    averageRateInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectorTokens(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectors(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conversionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convert(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _trader: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    converterType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConnectorBalance(
      _connectorToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReturn(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isV28OrHigher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxConversionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOwnerCanUpdateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recentAverageRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "removeLiquidity(uint256,uint256,uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      _reserve1MinReturn: PromiseOrValue<BigNumberish>,
      _reserve2MinReturn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(uint256,address[],uint256[])"(
      _amount: PromiseOrValue<BigNumberish>,
      _reserveTokens: PromiseOrValue<string>[],
      _reserveMinReturnAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityReturn(
      _amount: PromiseOrValue<BigNumberish>,
      _reserveTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveBalance(
      _reserveToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveWeight(
      _reserveToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    restoreRegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConversionFee(
      _conversionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    targetAmountAndFee(
      _sourceToken: PromiseOrValue<string>,
      _targetToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAnchorOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTokenOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRegistry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawETH(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
