/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DodoFarmInterface extends utils.Interface {
  functions: {
    "_NEW_OWNER_()": FunctionFragment;
    "_OWNER_()": FunctionFragment;
    "_TOKEN_()": FunctionFragment;
    "addRewardToken(address,uint256,uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimAllRewards()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getIdByRewardToken(address)": FunctionFragment;
    "getPendingReward(address,uint256)": FunctionFragment;
    "getPendingRewardByToken(address,address)": FunctionFragment;
    "getRewardNum()": FunctionFragment;
    "getRewardTokenById(uint256)": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "initOwner(address)": FunctionFragment;
    "removeRewardToken(address)": FunctionFragment;
    "rewardTokenInfos(uint256)": FunctionFragment;
    "setEndBlock(uint256,uint256)": FunctionFragment;
    "setReward(uint256,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawLeftOver(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_NEW_OWNER_"
      | "_OWNER_"
      | "_TOKEN_"
      | "addRewardToken"
      | "balanceOf"
      | "claimAllRewards"
      | "claimOwnership"
      | "claimReward"
      | "deposit"
      | "getIdByRewardToken"
      | "getPendingReward"
      | "getPendingRewardByToken"
      | "getRewardNum"
      | "getRewardTokenById"
      | "init"
      | "initOwner"
      | "removeRewardToken"
      | "rewardTokenInfos"
      | "setEndBlock"
      | "setReward"
      | "totalSupply"
      | "transferOwnership"
      | "withdraw"
      | "withdrawLeftOver"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_NEW_OWNER_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_OWNER_", values?: undefined): string;
  encodeFunctionData(functionFragment: "_TOKEN_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdByRewardToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewardByToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRewardToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndBlock",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLeftOver",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_NEW_OWNER_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_OWNER_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_TOKEN_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIdByRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewardByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLeftOver",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint256,address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "NewRewardToken(uint256,address)": EventFragment;
    "OwnershipTransferPrepared(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveRewardToken(address)": EventFragment;
    "UpdateEndBlock(uint256,uint256)": EventFragment;
    "UpdateReward(uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawLeftOver(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRewardToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferPrepared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveRewardToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEndBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLeftOver"): EventFragment;
}

export interface ClaimEventObject {
  i: BigNumber;
  user: string;
  reward: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface NewRewardTokenEventObject {
  i: BigNumber;
  rewardToken: string;
}
export type NewRewardTokenEvent = TypedEvent<
  [BigNumber, string],
  NewRewardTokenEventObject
>;

export type NewRewardTokenEventFilter = TypedEventFilter<NewRewardTokenEvent>;

export interface OwnershipTransferPreparedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferPreparedEvent = TypedEvent<
  [string, string],
  OwnershipTransferPreparedEventObject
>;

export type OwnershipTransferPreparedEventFilter =
  TypedEventFilter<OwnershipTransferPreparedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveRewardTokenEventObject {
  rewardToken: string;
}
export type RemoveRewardTokenEvent = TypedEvent<
  [string],
  RemoveRewardTokenEventObject
>;

export type RemoveRewardTokenEventFilter =
  TypedEventFilter<RemoveRewardTokenEvent>;

export interface UpdateEndBlockEventObject {
  i: BigNumber;
  endBlock: BigNumber;
}
export type UpdateEndBlockEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateEndBlockEventObject
>;

export type UpdateEndBlockEventFilter = TypedEventFilter<UpdateEndBlockEvent>;

export interface UpdateRewardEventObject {
  i: BigNumber;
  rewardPerBlock: BigNumber;
}
export type UpdateRewardEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateRewardEventObject
>;

export type UpdateRewardEventFilter = TypedEventFilter<UpdateRewardEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawLeftOverEventObject {
  owner: string;
  i: BigNumber;
}
export type WithdrawLeftOverEvent = TypedEvent<
  [string, BigNumber],
  WithdrawLeftOverEventObject
>;

export type WithdrawLeftOverEventFilter =
  TypedEventFilter<WithdrawLeftOverEvent>;

export interface DodoFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DodoFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _NEW_OWNER_(overrides?: CallOverrides): Promise<[string]>;

    _OWNER_(overrides?: CallOverrides): Promise<[string]>;

    _TOKEN_(overrides?: CallOverrides): Promise<[string]>;

    addRewardToken(
      rewardToken: PromiseOrValue<string>,
      rewardPerBlock: PromiseOrValue<BigNumberish>,
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimAllRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      i: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getIdByRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingReward(
      user: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingRewardByToken(
      user: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardTokenById(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    init(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardTokenInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        startBlock: BigNumber;
        endBlock: BigNumber;
        rewardVault: string;
        rewardPerBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    setEndBlock(
      i: PromiseOrValue<BigNumberish>,
      newEndBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReward(
      i: PromiseOrValue<BigNumberish>,
      newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLeftOver(
      i: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _NEW_OWNER_(overrides?: CallOverrides): Promise<string>;

  _OWNER_(overrides?: CallOverrides): Promise<string>;

  _TOKEN_(overrides?: CallOverrides): Promise<string>;

  addRewardToken(
    rewardToken: PromiseOrValue<string>,
    rewardPerBlock: PromiseOrValue<BigNumberish>,
    startBlock: PromiseOrValue<BigNumberish>,
    endBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimAllRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    i: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getIdByRewardToken(
    rewardToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingReward(
    user: PromiseOrValue<string>,
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingRewardByToken(
    user: PromiseOrValue<string>,
    rewardToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardNum(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardTokenById(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRewardToken(
    rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardTokenInfos(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      rewardToken: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      rewardVault: string;
      rewardPerBlock: BigNumber;
      accRewardPerShare: BigNumber;
      lastRewardBlock: BigNumber;
    }
  >;

  setEndBlock(
    i: PromiseOrValue<BigNumberish>,
    newEndBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReward(
    i: PromiseOrValue<BigNumberish>,
    newRewardPerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLeftOver(
    i: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _NEW_OWNER_(overrides?: CallOverrides): Promise<string>;

    _OWNER_(overrides?: CallOverrides): Promise<string>;

    _TOKEN_(overrides?: CallOverrides): Promise<string>;

    addRewardToken(
      rewardToken: PromiseOrValue<string>,
      rewardPerBlock: PromiseOrValue<BigNumberish>,
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAllRewards(overrides?: CallOverrides): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    claimReward(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getIdByRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingReward(
      user: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByToken(
      user: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardNum(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenById(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    init(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardTokenInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        startBlock: BigNumber;
        endBlock: BigNumber;
        rewardVault: string;
        rewardPerBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    setEndBlock(
      i: PromiseOrValue<BigNumberish>,
      newEndBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReward(
      i: PromiseOrValue<BigNumberish>,
      newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLeftOver(
      i: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claim(uint256,address,uint256)"(
      i?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      reward?: null
    ): ClaimEventFilter;
    Claim(
      i?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      reward?: null
    ): ClaimEventFilter;

    "Deposit(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;

    "NewRewardToken(uint256,address)"(
      i?: PromiseOrValue<BigNumberish> | null,
      rewardToken?: null
    ): NewRewardTokenEventFilter;
    NewRewardToken(
      i?: PromiseOrValue<BigNumberish> | null,
      rewardToken?: null
    ): NewRewardTokenEventFilter;

    "OwnershipTransferPrepared(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferPreparedEventFilter;
    OwnershipTransferPrepared(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferPreparedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveRewardToken(address)"(
      rewardToken?: null
    ): RemoveRewardTokenEventFilter;
    RemoveRewardToken(rewardToken?: null): RemoveRewardTokenEventFilter;

    "UpdateEndBlock(uint256,uint256)"(
      i?: PromiseOrValue<BigNumberish> | null,
      endBlock?: null
    ): UpdateEndBlockEventFilter;
    UpdateEndBlock(
      i?: PromiseOrValue<BigNumberish> | null,
      endBlock?: null
    ): UpdateEndBlockEventFilter;

    "UpdateReward(uint256,uint256)"(
      i?: PromiseOrValue<BigNumberish> | null,
      rewardPerBlock?: null
    ): UpdateRewardEventFilter;
    UpdateReward(
      i?: PromiseOrValue<BigNumberish> | null,
      rewardPerBlock?: null
    ): UpdateRewardEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;

    "WithdrawLeftOver(address,uint256)"(
      owner?: null,
      i?: null
    ): WithdrawLeftOverEventFilter;
    WithdrawLeftOver(owner?: null, i?: null): WithdrawLeftOverEventFilter;
  };

  estimateGas: {
    _NEW_OWNER_(overrides?: CallOverrides): Promise<BigNumber>;

    _OWNER_(overrides?: CallOverrides): Promise<BigNumber>;

    _TOKEN_(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardToken(
      rewardToken: PromiseOrValue<string>,
      rewardPerBlock: PromiseOrValue<BigNumberish>,
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAllRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      i: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getIdByRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingReward(
      user: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByToken(
      user: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardNum(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenById(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardTokenInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEndBlock(
      i: PromiseOrValue<BigNumberish>,
      newEndBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReward(
      i: PromiseOrValue<BigNumberish>,
      newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLeftOver(
      i: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _NEW_OWNER_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _OWNER_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _TOKEN_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardToken(
      rewardToken: PromiseOrValue<string>,
      rewardPerBlock: PromiseOrValue<BigNumberish>,
      startBlock: PromiseOrValue<BigNumberish>,
      endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAllRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      i: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getIdByRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingReward(
      user: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewardByToken(
      user: PromiseOrValue<string>,
      rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokenById(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokenInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEndBlock(
      i: PromiseOrValue<BigNumberish>,
      newEndBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReward(
      i: PromiseOrValue<BigNumberish>,
      newRewardPerBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLeftOver(
      i: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
