/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace FusePoolLensSecondary {
  export type CTokenOwnershipStruct = {
    cToken: PromiseOrValue<string>;
    admin: PromiseOrValue<string>;
    adminHasRights: PromiseOrValue<boolean>;
    fuseAdminHasRights: PromiseOrValue<boolean>;
  };

  export type CTokenOwnershipStructOutput = [
    string,
    string,
    boolean,
    boolean
  ] & {
    cToken: string;
    admin: string;
    adminHasRights: boolean;
    fuseAdminHasRights: boolean;
  };
}

export interface RariPoolLensSecondaryInterface extends utils.Interface {
  functions: {
    "directory()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "getPoolOwnership(address)": FunctionFragment;
    "getMaxRedeem(address,address)": FunctionFragment;
    "getMaxBorrow(address,address)": FunctionFragment;
    "getRewardSpeedsByPool(address)": FunctionFragment;
    "getRewardSpeedsByPools(address[])": FunctionFragment;
    "getUnclaimedRewardsByDistributors(address,address[])": FunctionFragment;
    "getRewardsDistributorsBySupplier(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "directory"
      | "initialize"
      | "getPoolOwnership"
      | "getMaxRedeem"
      | "getMaxBorrow"
      | "getRewardSpeedsByPool"
      | "getRewardSpeedsByPools"
      | "getUnclaimedRewardsByDistributors"
      | "getRewardsDistributorsBySupplier"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxRedeem",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxBorrow",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardSpeedsByPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardSpeedsByPools",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedRewardsByDistributors",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsDistributorsBySupplier",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardSpeedsByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardSpeedsByPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedRewardsByDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsDistributorsBySupplier",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RariPoolLensSecondary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RariPoolLensSecondaryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    directory(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _directory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPoolOwnership(
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        FusePoolLensSecondary.CTokenOwnershipStructOutput[]
      ]
    >;

    getMaxRedeem(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMaxBorrow(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRewardSpeedsByPool(
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], BigNumber[][], BigNumber[][]]>;

    getRewardSpeedsByPools(
      comptrollers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [string[][], string[][], string[][], BigNumber[][][], BigNumber[][][]]
    >;

    getUnclaimedRewardsByDistributors(
      holder: PromiseOrValue<string>,
      distributors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRewardsDistributorsBySupplier(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], string[][]]>;
  };

  directory(overrides?: CallOverrides): Promise<string>;

  initialize(
    _directory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPoolOwnership(
    comptroller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      boolean,
      FusePoolLensSecondary.CTokenOwnershipStructOutput[]
    ]
  >;

  getMaxRedeem(
    account: PromiseOrValue<string>,
    cTokenModify: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMaxBorrow(
    account: PromiseOrValue<string>,
    cTokenModify: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRewardSpeedsByPool(
    comptroller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], string[], string[], BigNumber[][], BigNumber[][]]>;

  getRewardSpeedsByPools(
    comptrollers: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<
    [string[][], string[][], string[][], BigNumber[][][], BigNumber[][][]]
  >;

  getUnclaimedRewardsByDistributors(
    holder: PromiseOrValue<string>,
    distributors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRewardsDistributorsBySupplier(
    supplier: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string[], string[][]]>;

  callStatic: {
    directory(overrides?: CallOverrides): Promise<string>;

    initialize(
      _directory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPoolOwnership(
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        FusePoolLensSecondary.CTokenOwnershipStructOutput[]
      ]
    >;

    getMaxRedeem(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxBorrow(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardSpeedsByPool(
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], string[], string[], BigNumber[][], BigNumber[][]]>;

    getRewardSpeedsByPools(
      comptrollers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [string[][], string[][], string[][], BigNumber[][][], BigNumber[][][]]
    >;

    getUnclaimedRewardsByDistributors(
      holder: PromiseOrValue<string>,
      distributors: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        BigNumber[],
        string[][],
        [BigNumber, BigNumber][][],
        BigNumber[]
      ]
    >;

    getRewardsDistributorsBySupplier(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string[], string[][]]>;
  };

  filters: {};

  estimateGas: {
    directory(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _directory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPoolOwnership(
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxRedeem(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMaxBorrow(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRewardSpeedsByPool(
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardSpeedsByPools(
      comptrollers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnclaimedRewardsByDistributors(
      holder: PromiseOrValue<string>,
      distributors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRewardsDistributorsBySupplier(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _directory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPoolOwnership(
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxRedeem(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMaxBorrow(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRewardSpeedsByPool(
      comptroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardSpeedsByPools(
      comptrollers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnclaimedRewardsByDistributors(
      holder: PromiseOrValue<string>,
      distributors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRewardsDistributorsBySupplier(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
