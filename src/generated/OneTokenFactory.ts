/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OneTokenFactoryInterface extends utils.Interface {
  functions: {
    "MODULE_TYPE()": FunctionFragment;
    "admitForeignToken(address,bool,address)": FunctionFragment;
    "admitModule(address,uint8,string,string)": FunctionFragment;
    "assignOracle(address,address)": FunctionFragment;
    "deployOneTokenProxy(string,string,address,address,address,address,address,address,address)": FunctionFragment;
    "foreignTokenAtIndex(uint256)": FunctionFragment;
    "foreignTokenCount()": FunctionFragment;
    "foreignTokenInfo(address)": FunctionFragment;
    "foreignTokenOracleAtIndex(address,uint256)": FunctionFragment;
    "foreignTokenOracleCount(address)": FunctionFragment;
    "isCollateral(address)": FunctionFragment;
    "isForeignToken(address)": FunctionFragment;
    "isModule(address)": FunctionFragment;
    "isOneToken(address)": FunctionFragment;
    "isOracle(address,address)": FunctionFragment;
    "isValidModuleType(address,uint8)": FunctionFragment;
    "moduleAtIndex(uint256)": FunctionFragment;
    "moduleCount()": FunctionFragment;
    "modules(address)": FunctionFragment;
    "oneTokenAtIndex(uint256)": FunctionFragment;
    "oneTokenCount()": FunctionFragment;
    "oneTokenProxyAdmins(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeForeignToken(address)": FunctionFragment;
    "removeModule(address)": FunctionFragment;
    "removeOracle(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateForeignToken(address,bool)": FunctionFragment;
    "updateModule(address,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MODULE_TYPE"
      | "admitForeignToken"
      | "admitModule"
      | "assignOracle"
      | "deployOneTokenProxy"
      | "foreignTokenAtIndex"
      | "foreignTokenCount"
      | "foreignTokenInfo"
      | "foreignTokenOracleAtIndex"
      | "foreignTokenOracleCount"
      | "isCollateral"
      | "isForeignToken"
      | "isModule"
      | "isOneToken"
      | "isOracle"
      | "isValidModuleType"
      | "moduleAtIndex"
      | "moduleCount"
      | "modules"
      | "oneTokenAtIndex"
      | "oneTokenCount"
      | "oneTokenProxyAdmins"
      | "owner"
      | "removeForeignToken"
      | "removeModule"
      | "removeOracle"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateForeignToken"
      | "updateModule"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MODULE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "admitForeignToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "admitModule",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assignOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployOneTokenProxy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "foreignTokenAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "foreignTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foreignTokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "foreignTokenOracleAtIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "foreignTokenOracleCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isForeignToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOneToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidModuleType",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modules",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oneTokenAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "oneTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneTokenProxyAdmins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeForeignToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateForeignToken",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateModule",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "MODULE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admitForeignToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admitModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployOneTokenProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foreignTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foreignTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foreignTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foreignTokenOracleAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foreignTokenOracleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isForeignToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOneToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidModuleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oneTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneTokenProxyAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeForeignToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateForeignToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateModule",
    data: BytesLike
  ): Result;

  events: {
    "AddOracle(address,address,address)": EventFragment;
    "ForeignTokenAdmitted(address,address,bool,address)": EventFragment;
    "ForeignTokenRemoved(address,address)": EventFragment;
    "ForeignTokenUpdated(address,address,bool)": EventFragment;
    "ModuleAdmitted(address,address,uint8,string,string)": EventFragment;
    "ModuleRemoved(address,address)": EventFragment;
    "ModuleUpdated(address,address,string,string)": EventFragment;
    "OneTokenAdmin(address,address,address)": EventFragment;
    "OneTokenDeployed(address,address,string,string,address,address,address,address,address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveOracle(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForeignTokenAdmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForeignTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForeignTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleAdmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OneTokenAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OneTokenDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveOracle"): EventFragment;
}

export interface AddOracleEventObject {
  sender: string;
  foreignToken: string;
  oracle: string;
}
export type AddOracleEvent = TypedEvent<
  [string, string, string],
  AddOracleEventObject
>;

export type AddOracleEventFilter = TypedEventFilter<AddOracleEvent>;

export interface ForeignTokenAdmittedEventObject {
  sender: string;
  foreignToken: string;
  isCollateral: boolean;
  oracle: string;
}
export type ForeignTokenAdmittedEvent = TypedEvent<
  [string, string, boolean, string],
  ForeignTokenAdmittedEventObject
>;

export type ForeignTokenAdmittedEventFilter =
  TypedEventFilter<ForeignTokenAdmittedEvent>;

export interface ForeignTokenRemovedEventObject {
  sender: string;
  foreignToken: string;
}
export type ForeignTokenRemovedEvent = TypedEvent<
  [string, string],
  ForeignTokenRemovedEventObject
>;

export type ForeignTokenRemovedEventFilter =
  TypedEventFilter<ForeignTokenRemovedEvent>;

export interface ForeignTokenUpdatedEventObject {
  sender: string;
  foreignToken: string;
  isCollateral: boolean;
}
export type ForeignTokenUpdatedEvent = TypedEvent<
  [string, string, boolean],
  ForeignTokenUpdatedEventObject
>;

export type ForeignTokenUpdatedEventFilter =
  TypedEventFilter<ForeignTokenUpdatedEvent>;

export interface ModuleAdmittedEventObject {
  sender: string;
  module: string;
  moduleType: number;
  name: string;
  url: string;
}
export type ModuleAdmittedEvent = TypedEvent<
  [string, string, number, string, string],
  ModuleAdmittedEventObject
>;

export type ModuleAdmittedEventFilter = TypedEventFilter<ModuleAdmittedEvent>;

export interface ModuleRemovedEventObject {
  sender: string;
  module: string;
}
export type ModuleRemovedEvent = TypedEvent<
  [string, string],
  ModuleRemovedEventObject
>;

export type ModuleRemovedEventFilter = TypedEventFilter<ModuleRemovedEvent>;

export interface ModuleUpdatedEventObject {
  sender: string;
  module: string;
  name: string;
  url: string;
}
export type ModuleUpdatedEvent = TypedEvent<
  [string, string, string, string],
  ModuleUpdatedEventObject
>;

export type ModuleUpdatedEventFilter = TypedEventFilter<ModuleUpdatedEvent>;

export interface OneTokenAdminEventObject {
  sender: string;
  newOneTokenProxy: string;
  proxyAdmin: string;
}
export type OneTokenAdminEvent = TypedEvent<
  [string, string, string],
  OneTokenAdminEventObject
>;

export type OneTokenAdminEventFilter = TypedEventFilter<OneTokenAdminEvent>;

export interface OneTokenDeployedEventObject {
  sender: string;
  newOneTokenProxy: string;
  name: string;
  symbol: string;
  governance: string;
  version: string;
  controller: string;
  mintMaster: string;
  oneTokenOracle: string;
  memberToken: string;
  collateral: string;
}
export type OneTokenDeployedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ],
  OneTokenDeployedEventObject
>;

export type OneTokenDeployedEventFilter =
  TypedEventFilter<OneTokenDeployedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveOracleEventObject {
  sender: string;
  foreignToken: string;
  oracle: string;
}
export type RemoveOracleEvent = TypedEvent<
  [string, string, string],
  RemoveOracleEventObject
>;

export type RemoveOracleEventFilter = TypedEventFilter<RemoveOracleEvent>;

export interface OneTokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OneTokenFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<[string]>;

    admitForeignToken(
      foreignToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<boolean>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admitModule(
      module: PromiseOrValue<string>,
      moduleType: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assignOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployOneTokenProxy(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      controller: PromiseOrValue<string>,
      mintMaster: PromiseOrValue<string>,
      oneTokenOracle: PromiseOrValue<string>,
      memberToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    foreignTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    foreignTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    foreignTokenInfo(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { collateral: boolean; oracleCount: BigNumber }
    >;

    foreignTokenOracleAtIndex(
      foreignToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    foreignTokenOracleCount(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isCollateral(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isForeignToken(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOneToken(
      oneToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidModuleType(
      module: PromiseOrValue<string>,
      moduleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    moduleAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { module: string }>;

    moduleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        url: string;
        moduleType: number;
      }
    >;

    oneTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oneTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    oneTokenProxyAdmins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeForeignToken(
      foreignToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateForeignToken(
      foreignToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateModule(
      module: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MODULE_TYPE(overrides?: CallOverrides): Promise<string>;

  admitForeignToken(
    foreignToken: PromiseOrValue<string>,
    collateral: PromiseOrValue<boolean>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admitModule(
    module: PromiseOrValue<string>,
    moduleType: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assignOracle(
    foreignToken: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployOneTokenProxy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    governance: PromiseOrValue<string>,
    version: PromiseOrValue<string>,
    controller: PromiseOrValue<string>,
    mintMaster: PromiseOrValue<string>,
    oneTokenOracle: PromiseOrValue<string>,
    memberToken: PromiseOrValue<string>,
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  foreignTokenAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  foreignTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  foreignTokenInfo(
    foreignToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { collateral: boolean; oracleCount: BigNumber }
  >;

  foreignTokenOracleAtIndex(
    foreignToken: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  foreignTokenOracleCount(
    foreignToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isCollateral(
    foreignToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isForeignToken(
    foreignToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isModule(
    module: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOneToken(
    oneToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOracle(
    foreignToken: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidModuleType(
    module: PromiseOrValue<string>,
    moduleType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  moduleAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  moduleCount(overrides?: CallOverrides): Promise<BigNumber>;

  modules(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & { name: string; url: string; moduleType: number }
  >;

  oneTokenAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  oneTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  oneTokenProxyAdmins(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeForeignToken(
    foreignToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    module: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOracle(
    foreignToken: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateForeignToken(
    foreignToken: PromiseOrValue<string>,
    collateral: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateModule(
    module: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<string>;

    admitForeignToken(
      foreignToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<boolean>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admitModule(
      module: PromiseOrValue<string>,
      moduleType: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    assignOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployOneTokenProxy(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      controller: PromiseOrValue<string>,
      mintMaster: PromiseOrValue<string>,
      oneTokenOracle: PromiseOrValue<string>,
      memberToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { newOneTokenProxy: string; proxyAdmin: string }
    >;

    foreignTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    foreignTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    foreignTokenInfo(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { collateral: boolean; oracleCount: BigNumber }
    >;

    foreignTokenOracleAtIndex(
      foreignToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    foreignTokenOracleCount(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollateral(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isForeignToken(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOneToken(
      oneToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidModuleType(
      module: PromiseOrValue<string>,
      moduleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    moduleAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    moduleCount(overrides?: CallOverrides): Promise<BigNumber>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        url: string;
        moduleType: number;
      }
    >;

    oneTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    oneTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    oneTokenProxyAdmins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeForeignToken(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateForeignToken(
      foreignToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateModule(
      module: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddOracle(address,address,address)"(
      sender?: null,
      foreignToken?: null,
      oracle?: null
    ): AddOracleEventFilter;
    AddOracle(
      sender?: null,
      foreignToken?: null,
      oracle?: null
    ): AddOracleEventFilter;

    "ForeignTokenAdmitted(address,address,bool,address)"(
      sender?: null,
      foreignToken?: null,
      isCollateral?: null,
      oracle?: null
    ): ForeignTokenAdmittedEventFilter;
    ForeignTokenAdmitted(
      sender?: null,
      foreignToken?: null,
      isCollateral?: null,
      oracle?: null
    ): ForeignTokenAdmittedEventFilter;

    "ForeignTokenRemoved(address,address)"(
      sender?: null,
      foreignToken?: null
    ): ForeignTokenRemovedEventFilter;
    ForeignTokenRemoved(
      sender?: null,
      foreignToken?: null
    ): ForeignTokenRemovedEventFilter;

    "ForeignTokenUpdated(address,address,bool)"(
      sender?: null,
      foreignToken?: null,
      isCollateral?: null
    ): ForeignTokenUpdatedEventFilter;
    ForeignTokenUpdated(
      sender?: null,
      foreignToken?: null,
      isCollateral?: null
    ): ForeignTokenUpdatedEventFilter;

    "ModuleAdmitted(address,address,uint8,string,string)"(
      sender?: null,
      module?: null,
      moduleType?: null,
      name?: null,
      url?: null
    ): ModuleAdmittedEventFilter;
    ModuleAdmitted(
      sender?: null,
      module?: null,
      moduleType?: null,
      name?: null,
      url?: null
    ): ModuleAdmittedEventFilter;

    "ModuleRemoved(address,address)"(
      sender?: null,
      module?: null
    ): ModuleRemovedEventFilter;
    ModuleRemoved(sender?: null, module?: null): ModuleRemovedEventFilter;

    "ModuleUpdated(address,address,string,string)"(
      sender?: null,
      module?: null,
      name?: null,
      url?: null
    ): ModuleUpdatedEventFilter;
    ModuleUpdated(
      sender?: null,
      module?: null,
      name?: null,
      url?: null
    ): ModuleUpdatedEventFilter;

    "OneTokenAdmin(address,address,address)"(
      sender?: null,
      newOneTokenProxy?: null,
      proxyAdmin?: null
    ): OneTokenAdminEventFilter;
    OneTokenAdmin(
      sender?: null,
      newOneTokenProxy?: null,
      proxyAdmin?: null
    ): OneTokenAdminEventFilter;

    "OneTokenDeployed(address,address,string,string,address,address,address,address,address,address,address)"(
      sender?: null,
      newOneTokenProxy?: null,
      name?: null,
      symbol?: null,
      governance?: null,
      version?: null,
      controller?: null,
      mintMaster?: null,
      oneTokenOracle?: null,
      memberToken?: null,
      collateral?: null
    ): OneTokenDeployedEventFilter;
    OneTokenDeployed(
      sender?: null,
      newOneTokenProxy?: null,
      name?: null,
      symbol?: null,
      governance?: null,
      version?: null,
      controller?: null,
      mintMaster?: null,
      oneTokenOracle?: null,
      memberToken?: null,
      collateral?: null
    ): OneTokenDeployedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveOracle(address,address,address)"(
      sender?: null,
      foreignToken?: null,
      oracle?: null
    ): RemoveOracleEventFilter;
    RemoveOracle(
      sender?: null,
      foreignToken?: null,
      oracle?: null
    ): RemoveOracleEventFilter;
  };

  estimateGas: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    admitForeignToken(
      foreignToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<boolean>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admitModule(
      module: PromiseOrValue<string>,
      moduleType: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assignOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployOneTokenProxy(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      controller: PromiseOrValue<string>,
      mintMaster: PromiseOrValue<string>,
      oneTokenOracle: PromiseOrValue<string>,
      memberToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    foreignTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foreignTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    foreignTokenInfo(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foreignTokenOracleAtIndex(
      foreignToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foreignTokenOracleCount(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollateral(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForeignToken(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOneToken(
      oneToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidModuleType(
      module: PromiseOrValue<string>,
      moduleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleCount(overrides?: CallOverrides): Promise<BigNumber>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    oneTokenProxyAdmins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeForeignToken(
      foreignToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeModule(
      module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateForeignToken(
      foreignToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateModule(
      module: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admitForeignToken(
      foreignToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<boolean>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admitModule(
      module: PromiseOrValue<string>,
      moduleType: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assignOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployOneTokenProxy(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      controller: PromiseOrValue<string>,
      mintMaster: PromiseOrValue<string>,
      oneTokenOracle: PromiseOrValue<string>,
      memberToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    foreignTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    foreignTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foreignTokenInfo(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    foreignTokenOracleAtIndex(
      foreignToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    foreignTokenOracleCount(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollateral(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isForeignToken(
      foreignToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isModule(
      module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOneToken(
      oneToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidModuleType(
      module: PromiseOrValue<string>,
      moduleType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moduleAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moduleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oneTokenProxyAdmins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeForeignToken(
      foreignToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOracle(
      foreignToken: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateForeignToken(
      foreignToken: PromiseOrValue<string>,
      collateral: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateModule(
      module: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
