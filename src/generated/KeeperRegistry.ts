/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ConfigStruct = {
  paymentPremiumPPB: PromiseOrValue<BigNumberish>;
  flatFeeMicroLink: PromiseOrValue<BigNumberish>;
  blockCountPerTurn: PromiseOrValue<BigNumberish>;
  checkGasLimit: PromiseOrValue<BigNumberish>;
  stalenessSeconds: PromiseOrValue<BigNumberish>;
  gasCeilingMultiplier: PromiseOrValue<BigNumberish>;
  minUpkeepSpend: PromiseOrValue<BigNumberish>;
  maxPerformGas: PromiseOrValue<BigNumberish>;
  fallbackGasPrice: PromiseOrValue<BigNumberish>;
  fallbackLinkPrice: PromiseOrValue<BigNumberish>;
  transcoder: PromiseOrValue<string>;
  registrar: PromiseOrValue<string>;
};

export type ConfigStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  paymentPremiumPPB: number;
  flatFeeMicroLink: number;
  blockCountPerTurn: number;
  checkGasLimit: number;
  stalenessSeconds: number;
  gasCeilingMultiplier: number;
  minUpkeepSpend: BigNumber;
  maxPerformGas: number;
  fallbackGasPrice: BigNumber;
  fallbackLinkPrice: BigNumber;
  transcoder: string;
  registrar: string;
};

export type StateStruct = {
  nonce: PromiseOrValue<BigNumberish>;
  ownerLinkBalance: PromiseOrValue<BigNumberish>;
  expectedLinkBalance: PromiseOrValue<BigNumberish>;
  numUpkeeps: PromiseOrValue<BigNumberish>;
};

export type StateStructOutput = [number, BigNumber, BigNumber, BigNumber] & {
  nonce: number;
  ownerLinkBalance: BigNumber;
  expectedLinkBalance: BigNumber;
  numUpkeeps: BigNumber;
};

export interface KeeperRegistryInterface extends utils.Interface {
  functions: {
    "FAST_GAS_FEED()": FunctionFragment;
    "LINK()": FunctionFragment;
    "LINK_ETH_FEED()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "acceptPayeeship(address)": FunctionFragment;
    "addFunds(uint256,uint96)": FunctionFragment;
    "cancelUpkeep(uint256)": FunctionFragment;
    "checkUpkeep(uint256,address)": FunctionFragment;
    "getActiveUpkeepIDs(uint256,uint256)": FunctionFragment;
    "getKeeperInfo(address)": FunctionFragment;
    "getMaxPaymentForGas(uint256)": FunctionFragment;
    "getMinBalanceForUpkeep(uint256)": FunctionFragment;
    "getPeerRegistryMigrationPermission(address)": FunctionFragment;
    "getState()": FunctionFragment;
    "getUpkeep(uint256)": FunctionFragment;
    "migrateUpkeeps(uint256[],address)": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "performUpkeep(uint256,bytes)": FunctionFragment;
    "receiveUpkeeps(bytes)": FunctionFragment;
    "recoverFunds()": FunctionFragment;
    "registerUpkeep(address,uint32,address,bytes)": FunctionFragment;
    "setConfig((uint32,uint32,uint24,uint32,uint24,uint16,uint96,uint32,uint256,uint256,address,address))": FunctionFragment;
    "setKeepers(address[],address[])": FunctionFragment;
    "setPeerRegistryMigrationPermission(address,uint8)": FunctionFragment;
    "setUpkeepGasLimit(uint256,uint32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPayeeship(address,address)": FunctionFragment;
    "typeAndVersion()": FunctionFragment;
    "unpause()": FunctionFragment;
    "upkeepTranscoderVersion()": FunctionFragment;
    "withdrawFunds(uint256,address)": FunctionFragment;
    "withdrawOwnerFunds()": FunctionFragment;
    "withdrawPayment(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FAST_GAS_FEED"
      | "LINK"
      | "LINK_ETH_FEED"
      | "acceptOwnership"
      | "acceptPayeeship"
      | "addFunds"
      | "cancelUpkeep"
      | "checkUpkeep"
      | "getActiveUpkeepIDs"
      | "getKeeperInfo"
      | "getMaxPaymentForGas"
      | "getMinBalanceForUpkeep"
      | "getPeerRegistryMigrationPermission"
      | "getState"
      | "getUpkeep"
      | "migrateUpkeeps"
      | "onTokenTransfer"
      | "owner"
      | "pause"
      | "paused"
      | "performUpkeep"
      | "receiveUpkeeps"
      | "recoverFunds"
      | "registerUpkeep"
      | "setConfig"
      | "setKeepers"
      | "setPeerRegistryMigrationPermission"
      | "setUpkeepGasLimit"
      | "transferOwnership"
      | "transferPayeeship"
      | "typeAndVersion"
      | "unpause"
      | "upkeepTranscoderVersion"
      | "withdrawFunds"
      | "withdrawOwnerFunds"
      | "withdrawPayment"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FAST_GAS_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LINK_ETH_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptPayeeship",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFunds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpkeep",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveUpkeepIDs",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeeperInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPaymentForGas",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBalanceForUpkeep",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeerRegistryMigrationPermission",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUpkeep",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateUpkeeps",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveUpkeeps",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerUpkeep",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeepers",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeerRegistryMigrationPermission",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpkeepGasLimit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPayeeship",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upkeepTranscoderVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOwnerFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayment",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "FAST_GAS_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LINK_ETH_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptPayeeship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveUpkeepIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeeperInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPaymentForGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBalanceForUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeerRegistryMigrationPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUpkeep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateUpkeeps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveUpkeeps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKeepers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPeerRegistryMigrationPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpkeepGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPayeeship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upkeepTranscoderVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOwnerFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayment",
    data: BytesLike
  ): Result;

  events: {
    "ConfigSet(tuple)": EventFragment;
    "FundsAdded(uint256,address,uint96)": EventFragment;
    "FundsWithdrawn(uint256,uint256,address)": EventFragment;
    "KeepersUpdated(address[],address[])": EventFragment;
    "OwnerFundsWithdrawn(uint96)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PayeeshipTransferRequested(address,address,address)": EventFragment;
    "PayeeshipTransferred(address,address,address)": EventFragment;
    "PaymentWithdrawn(address,uint256,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpkeepCanceled(uint256,uint64)": EventFragment;
    "UpkeepGasLimitSet(uint256,uint96)": EventFragment;
    "UpkeepMigrated(uint256,uint256,address)": EventFragment;
    "UpkeepPerformed(uint256,bool,address,uint96,bytes)": EventFragment;
    "UpkeepReceived(uint256,uint256,address)": EventFragment;
    "UpkeepRegistered(uint256,uint32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeepersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerFundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeshipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeshipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpkeepCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpkeepGasLimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpkeepMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpkeepPerformed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpkeepReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpkeepRegistered"): EventFragment;
}

export interface ConfigSetEventObject {
  config: ConfigStructOutput;
}
export type ConfigSetEvent = TypedEvent<
  [ConfigStructOutput],
  ConfigSetEventObject
>;

export type ConfigSetEventFilter = TypedEventFilter<ConfigSetEvent>;

export interface FundsAddedEventObject {
  id: BigNumber;
  from: string;
  amount: BigNumber;
}
export type FundsAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  FundsAddedEventObject
>;

export type FundsAddedEventFilter = TypedEventFilter<FundsAddedEvent>;

export interface FundsWithdrawnEventObject {
  id: BigNumber;
  amount: BigNumber;
  to: string;
}
export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface KeepersUpdatedEventObject {
  keepers: string[];
  payees: string[];
}
export type KeepersUpdatedEvent = TypedEvent<
  [string[], string[]],
  KeepersUpdatedEventObject
>;

export type KeepersUpdatedEventFilter = TypedEventFilter<KeepersUpdatedEvent>;

export interface OwnerFundsWithdrawnEventObject {
  amount: BigNumber;
}
export type OwnerFundsWithdrawnEvent = TypedEvent<
  [BigNumber],
  OwnerFundsWithdrawnEventObject
>;

export type OwnerFundsWithdrawnEventFilter =
  TypedEventFilter<OwnerFundsWithdrawnEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PayeeshipTransferRequestedEventObject {
  keeper: string;
  from: string;
  to: string;
}
export type PayeeshipTransferRequestedEvent = TypedEvent<
  [string, string, string],
  PayeeshipTransferRequestedEventObject
>;

export type PayeeshipTransferRequestedEventFilter =
  TypedEventFilter<PayeeshipTransferRequestedEvent>;

export interface PayeeshipTransferredEventObject {
  keeper: string;
  from: string;
  to: string;
}
export type PayeeshipTransferredEvent = TypedEvent<
  [string, string, string],
  PayeeshipTransferredEventObject
>;

export type PayeeshipTransferredEventFilter =
  TypedEventFilter<PayeeshipTransferredEvent>;

export interface PaymentWithdrawnEventObject {
  keeper: string;
  amount: BigNumber;
  to: string;
  payee: string;
}
export type PaymentWithdrawnEvent = TypedEvent<
  [string, BigNumber, string, string],
  PaymentWithdrawnEventObject
>;

export type PaymentWithdrawnEventFilter =
  TypedEventFilter<PaymentWithdrawnEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpkeepCanceledEventObject {
  id: BigNumber;
  atBlockHeight: BigNumber;
}
export type UpkeepCanceledEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpkeepCanceledEventObject
>;

export type UpkeepCanceledEventFilter = TypedEventFilter<UpkeepCanceledEvent>;

export interface UpkeepGasLimitSetEventObject {
  id: BigNumber;
  gasLimit: BigNumber;
}
export type UpkeepGasLimitSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpkeepGasLimitSetEventObject
>;

export type UpkeepGasLimitSetEventFilter =
  TypedEventFilter<UpkeepGasLimitSetEvent>;

export interface UpkeepMigratedEventObject {
  id: BigNumber;
  remainingBalance: BigNumber;
  destination: string;
}
export type UpkeepMigratedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UpkeepMigratedEventObject
>;

export type UpkeepMigratedEventFilter = TypedEventFilter<UpkeepMigratedEvent>;

export interface UpkeepPerformedEventObject {
  id: BigNumber;
  success: boolean;
  from: string;
  payment: BigNumber;
  performData: string;
}
export type UpkeepPerformedEvent = TypedEvent<
  [BigNumber, boolean, string, BigNumber, string],
  UpkeepPerformedEventObject
>;

export type UpkeepPerformedEventFilter = TypedEventFilter<UpkeepPerformedEvent>;

export interface UpkeepReceivedEventObject {
  id: BigNumber;
  startingBalance: BigNumber;
  importedFrom: string;
}
export type UpkeepReceivedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  UpkeepReceivedEventObject
>;

export type UpkeepReceivedEventFilter = TypedEventFilter<UpkeepReceivedEvent>;

export interface UpkeepRegisteredEventObject {
  id: BigNumber;
  executeGas: number;
  admin: string;
}
export type UpkeepRegisteredEvent = TypedEvent<
  [BigNumber, number, string],
  UpkeepRegisteredEventObject
>;

export type UpkeepRegisteredEventFilter =
  TypedEventFilter<UpkeepRegisteredEvent>;

export interface KeeperRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KeeperRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FAST_GAS_FEED(overrides?: CallOverrides): Promise<[string]>;

    LINK(overrides?: CallOverrides): Promise<[string]>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptPayeeship(
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFunds(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      id: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveUpkeepIDs(
      startIndex: PromiseOrValue<BigNumberish>,
      maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getKeeperInfo(
      query: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        payee: string;
        active: boolean;
        balance: BigNumber;
      }
    >;

    getMaxPaymentForGas(
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxPayment: BigNumber }>;

    getMinBalanceForUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minBalance: BigNumber }>;

    getPeerRegistryMigrationPermission(
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [StateStructOutput, ConfigStructOutput, string[]] & {
        state: StateStructOutput;
        config: ConfigStructOutput;
        keepers: string[];
      }
    >;

    getUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        target: string;
        executeGas: number;
        checkData: string;
        balance: BigNumber;
        lastKeeper: string;
        admin: string;
        maxValidBlocknumber: BigNumber;
        amountSpent: BigNumber;
      }
    >;

    migrateUpkeeps(
      ids: PromiseOrValue<BigNumberish>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performUpkeep(
      id: PromiseOrValue<BigNumberish>,
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveUpkeeps(
      encodedUpkeeps: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerUpkeep(
      target: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      checkData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      config: ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeepers(
      keepers: PromiseOrValue<string>[],
      payees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPeerRegistryMigrationPermission(
      peer: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpkeepGasLimit(
      id: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferPayeeship(
      keeper: PromiseOrValue<string>,
      proposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upkeepTranscoderVersion(overrides?: CallOverrides): Promise<[number]>;

    withdrawFunds(
      id: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawOwnerFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawPayment(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FAST_GAS_FEED(overrides?: CallOverrides): Promise<string>;

  LINK(overrides?: CallOverrides): Promise<string>;

  LINK_ETH_FEED(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptPayeeship(
    keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFunds(
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelUpkeep(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    id: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveUpkeepIDs(
    startIndex: PromiseOrValue<BigNumberish>,
    maxCount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getKeeperInfo(
    query: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber] & {
      payee: string;
      active: boolean;
      balance: BigNumber;
    }
  >;

  getMaxPaymentForGas(
    gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinBalanceForUpkeep(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeerRegistryMigrationPermission(
    peer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getState(
    overrides?: CallOverrides
  ): Promise<
    [StateStructOutput, ConfigStructOutput, string[]] & {
      state: StateStructOutput;
      config: ConfigStructOutput;
      keepers: string[];
    }
  >;

  getUpkeep(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber
    ] & {
      target: string;
      executeGas: number;
      checkData: string;
      balance: BigNumber;
      lastKeeper: string;
      admin: string;
      maxValidBlocknumber: BigNumber;
      amountSpent: BigNumber;
    }
  >;

  migrateUpkeeps(
    ids: PromiseOrValue<BigNumberish>[],
    destination: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onTokenTransfer(
    sender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performUpkeep(
    id: PromiseOrValue<BigNumberish>,
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveUpkeeps(
    encodedUpkeeps: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerUpkeep(
    target: PromiseOrValue<string>,
    gasLimit: PromiseOrValue<BigNumberish>,
    admin: PromiseOrValue<string>,
    checkData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    config: ConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeepers(
    keepers: PromiseOrValue<string>[],
    payees: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPeerRegistryMigrationPermission(
    peer: PromiseOrValue<string>,
    permission: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpkeepGasLimit(
    id: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferPayeeship(
    keeper: PromiseOrValue<string>,
    proposed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  typeAndVersion(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upkeepTranscoderVersion(overrides?: CallOverrides): Promise<number>;

  withdrawFunds(
    id: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawOwnerFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawPayment(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FAST_GAS_FEED(overrides?: CallOverrides): Promise<string>;

    LINK(overrides?: CallOverrides): Promise<string>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptPayeeship(
      keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFunds(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkUpkeep(
      id: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        performData: string;
        maxLinkPayment: BigNumber;
        gasLimit: BigNumber;
        adjustedGasWei: BigNumber;
        linkEth: BigNumber;
      }
    >;

    getActiveUpkeepIDs(
      startIndex: PromiseOrValue<BigNumberish>,
      maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getKeeperInfo(
      query: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        payee: string;
        active: boolean;
        balance: BigNumber;
      }
    >;

    getMaxPaymentForGas(
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBalanceForUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeerRegistryMigrationPermission(
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getState(
      overrides?: CallOverrides
    ): Promise<
      [StateStructOutput, ConfigStructOutput, string[]] & {
        state: StateStructOutput;
        config: ConfigStructOutput;
        keepers: string[];
      }
    >;

    getUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        target: string;
        executeGas: number;
        checkData: string;
        balance: BigNumber;
        lastKeeper: string;
        admin: string;
        maxValidBlocknumber: BigNumber;
        amountSpent: BigNumber;
      }
    >;

    migrateUpkeeps(
      ids: PromiseOrValue<BigNumberish>[],
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performUpkeep(
      id: PromiseOrValue<BigNumberish>,
      performData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveUpkeeps(
      encodedUpkeeps: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverFunds(overrides?: CallOverrides): Promise<void>;

    registerUpkeep(
      target: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      checkData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setConfig(config: ConfigStruct, overrides?: CallOverrides): Promise<void>;

    setKeepers(
      keepers: PromiseOrValue<string>[],
      payees: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPeerRegistryMigrationPermission(
      peer: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpkeepGasLimit(
      id: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPayeeship(
      keeper: PromiseOrValue<string>,
      proposed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    typeAndVersion(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upkeepTranscoderVersion(overrides?: CallOverrides): Promise<number>;

    withdrawFunds(
      id: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawOwnerFunds(overrides?: CallOverrides): Promise<void>;

    withdrawPayment(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConfigSet(tuple)"(config?: null): ConfigSetEventFilter;
    ConfigSet(config?: null): ConfigSetEventFilter;

    "FundsAdded(uint256,address,uint96)"(
      id?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsAddedEventFilter;
    FundsAdded(
      id?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsAddedEventFilter;

    "FundsWithdrawn(uint256,uint256,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      to?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      to?: null
    ): FundsWithdrawnEventFilter;

    "KeepersUpdated(address[],address[])"(
      keepers?: null,
      payees?: null
    ): KeepersUpdatedEventFilter;
    KeepersUpdated(keepers?: null, payees?: null): KeepersUpdatedEventFilter;

    "OwnerFundsWithdrawn(uint96)"(
      amount?: null
    ): OwnerFundsWithdrawnEventFilter;
    OwnerFundsWithdrawn(amount?: null): OwnerFundsWithdrawnEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PayeeshipTransferRequested(address,address,address)"(
      keeper?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): PayeeshipTransferRequestedEventFilter;
    PayeeshipTransferRequested(
      keeper?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): PayeeshipTransferRequestedEventFilter;

    "PayeeshipTransferred(address,address,address)"(
      keeper?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): PayeeshipTransferredEventFilter;
    PayeeshipTransferred(
      keeper?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): PayeeshipTransferredEventFilter;

    "PaymentWithdrawn(address,uint256,address,address)"(
      keeper?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      payee?: null
    ): PaymentWithdrawnEventFilter;
    PaymentWithdrawn(
      keeper?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      payee?: null
    ): PaymentWithdrawnEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UpkeepCanceled(uint256,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      atBlockHeight?: PromiseOrValue<BigNumberish> | null
    ): UpkeepCanceledEventFilter;
    UpkeepCanceled(
      id?: PromiseOrValue<BigNumberish> | null,
      atBlockHeight?: PromiseOrValue<BigNumberish> | null
    ): UpkeepCanceledEventFilter;

    "UpkeepGasLimitSet(uint256,uint96)"(
      id?: PromiseOrValue<BigNumberish> | null,
      gasLimit?: null
    ): UpkeepGasLimitSetEventFilter;
    UpkeepGasLimitSet(
      id?: PromiseOrValue<BigNumberish> | null,
      gasLimit?: null
    ): UpkeepGasLimitSetEventFilter;

    "UpkeepMigrated(uint256,uint256,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      remainingBalance?: null,
      destination?: null
    ): UpkeepMigratedEventFilter;
    UpkeepMigrated(
      id?: PromiseOrValue<BigNumberish> | null,
      remainingBalance?: null,
      destination?: null
    ): UpkeepMigratedEventFilter;

    "UpkeepPerformed(uint256,bool,address,uint96,bytes)"(
      id?: PromiseOrValue<BigNumberish> | null,
      success?: PromiseOrValue<boolean> | null,
      from?: PromiseOrValue<string> | null,
      payment?: null,
      performData?: null
    ): UpkeepPerformedEventFilter;
    UpkeepPerformed(
      id?: PromiseOrValue<BigNumberish> | null,
      success?: PromiseOrValue<boolean> | null,
      from?: PromiseOrValue<string> | null,
      payment?: null,
      performData?: null
    ): UpkeepPerformedEventFilter;

    "UpkeepReceived(uint256,uint256,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      startingBalance?: null,
      importedFrom?: null
    ): UpkeepReceivedEventFilter;
    UpkeepReceived(
      id?: PromiseOrValue<BigNumberish> | null,
      startingBalance?: null,
      importedFrom?: null
    ): UpkeepReceivedEventFilter;

    "UpkeepRegistered(uint256,uint32,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      executeGas?: null,
      admin?: null
    ): UpkeepRegisteredEventFilter;
    UpkeepRegistered(
      id?: PromiseOrValue<BigNumberish> | null,
      executeGas?: null,
      admin?: null
    ): UpkeepRegisteredEventFilter;
  };

  estimateGas: {
    FAST_GAS_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    LINK(overrides?: CallOverrides): Promise<BigNumber>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptPayeeship(
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFunds(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkUpkeep(
      id: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveUpkeepIDs(
      startIndex: PromiseOrValue<BigNumberish>,
      maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeeperInfo(
      query: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPaymentForGas(
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBalanceForUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeerRegistryMigrationPermission(
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateUpkeeps(
      ids: PromiseOrValue<BigNumberish>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      id: PromiseOrValue<BigNumberish>,
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveUpkeeps(
      encodedUpkeeps: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerUpkeep(
      target: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      checkData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig(
      config: ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeepers(
      keepers: PromiseOrValue<string>[],
      payees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPeerRegistryMigrationPermission(
      peer: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpkeepGasLimit(
      id: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferPayeeship(
      keeper: PromiseOrValue<string>,
      proposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upkeepTranscoderVersion(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      id: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawOwnerFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawPayment(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FAST_GAS_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptPayeeship(
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFunds(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      id: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveUpkeepIDs(
      startIndex: PromiseOrValue<BigNumberish>,
      maxCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeeperInfo(
      query: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxPaymentForGas(
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinBalanceForUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeerRegistryMigrationPermission(
      peer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpkeep(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateUpkeeps(
      ids: PromiseOrValue<BigNumberish>[],
      destination: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onTokenTransfer(
      sender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      id: PromiseOrValue<BigNumberish>,
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveUpkeeps(
      encodedUpkeeps: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerUpkeep(
      target: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      admin: PromiseOrValue<string>,
      checkData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeepers(
      keepers: PromiseOrValue<string>[],
      payees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPeerRegistryMigrationPermission(
      peer: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpkeepGasLimit(
      id: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferPayeeship(
      keeper: PromiseOrValue<string>,
      proposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upkeepTranscoderVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      id: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOwnerFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPayment(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
