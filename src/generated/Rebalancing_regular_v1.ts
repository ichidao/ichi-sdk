/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type LowHighPositionStruct = {
  baseLo: PromiseOrValue<BigNumberish>;
  baseUp: PromiseOrValue<BigNumberish>;
  limitLo: PromiseOrValue<BigNumberish>;
  limitUp: PromiseOrValue<BigNumberish>;
};

export type LowHighPositionStructOutput = [number, number, number, number] & {
  baseLo: number;
  baseUp: number;
  limitLo: number;
  limitUp: number;
};

export interface Rebalancing_regular_v1Interface extends utils.Interface {
  functions: {
    "GAS_DELAY()": FunctionFragment;
    "_currentPosition(address)": FunctionFragment;
    "baseLoPct()": FunctionFragment;
    "beginOverInvPct()": FunctionFragment;
    "beginUnderInvPct()": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "currentVolatility()": FunctionFragment;
    "depositTokenRatio()": FunctionFragment;
    "dtrDelta()": FunctionFragment;
    "endOverInvPct()": FunctionFragment;
    "endUnderInvPct()": FunctionFragment;
    "executionDelay()": FunctionFragment;
    "extremeVolatility()": FunctionFragment;
    "gasOracle()": FunctionFragment;
    "gasTolerance()": FunctionFragment;
    "gnosis()": FunctionFragment;
    "highGasStart()": FunctionFragment;
    "highVolatility()": FunctionFragment;
    "lastRebalance()": FunctionFragment;
    "limitReservePct()": FunctionFragment;
    "limitUpPct()": FunctionFragment;
    "minTimeBetweenRebalances()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingDepositsPct()": FunctionFragment;
    "pendingDepositsRatio()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "poolPrices()": FunctionFragment;
    "priceChange()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "rebalanceInitiation()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBaseLoPct(uint256)": FunctionFragment;
    "setDtrBoundaries(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setGasOracle(address)": FunctionFragment;
    "setGasTolerance(uint256)": FunctionFragment;
    "setLimitReservePct(uint256)": FunctionFragment;
    "setLimitUpPct(uint256)": FunctionFragment;
    "setMinTimeBetweenRebalances(uint256)": FunctionFragment;
    "setPendingDepositsPct(uint256)": FunctionFragment;
    "setPriceChange(uint256)": FunctionFragment;
    "simulate()": FunctionFragment;
    "someVolatility()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "twapFast()": FunctionFragment;
    "twapSlow()": FunctionFragment;
    "unpause()": FunctionFragment;
    "vault()": FunctionFragment;
    "vaultAmounts()": FunctionFragment;
    "vaultSummary()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GAS_DELAY"
      | "_currentPosition"
      | "baseLoPct"
      | "beginOverInvPct"
      | "beginUnderInvPct"
      | "checkUpkeep"
      | "currentVolatility"
      | "depositTokenRatio"
      | "dtrDelta"
      | "endOverInvPct"
      | "endUnderInvPct"
      | "executionDelay"
      | "extremeVolatility"
      | "gasOracle"
      | "gasTolerance"
      | "gnosis"
      | "highGasStart"
      | "highVolatility"
      | "lastRebalance"
      | "limitReservePct"
      | "limitUpPct"
      | "minTimeBetweenRebalances"
      | "owner"
      | "pause"
      | "paused"
      | "pendingDepositsPct"
      | "pendingDepositsRatio"
      | "performUpkeep"
      | "poolPrices"
      | "priceChange"
      | "rebalance"
      | "rebalanceInitiation"
      | "renounceOwnership"
      | "setBaseLoPct"
      | "setDtrBoundaries"
      | "setGasOracle"
      | "setGasTolerance"
      | "setLimitReservePct"
      | "setLimitUpPct"
      | "setMinTimeBetweenRebalances"
      | "setPendingDepositsPct"
      | "setPriceChange"
      | "simulate"
      | "someVolatility"
      | "transferOwnership"
      | "twapFast"
      | "twapSlow"
      | "unpause"
      | "vault"
      | "vaultAmounts"
      | "vaultSummary"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "GAS_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_currentPosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "baseLoPct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beginOverInvPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beginUnderInvPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentVolatility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dtrDelta", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endOverInvPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endUnderInvPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extremeVolatility",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gnosis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "highGasStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highVolatility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRebalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitReservePct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitUpPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeBetweenRebalances",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingDepositsPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDepositsRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolPrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceChange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceInitiation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseLoPct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDtrBoundaries",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasTolerance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitReservePct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitUpPct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTimeBetweenRebalances",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingDepositsPct",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceChange",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "simulate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "someVolatility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "twapFast", values?: undefined): string;
  encodeFunctionData(functionFragment: "twapSlow", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultSummary",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "GAS_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_currentPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseLoPct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beginOverInvPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginUnderInvPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dtrDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endOverInvPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endUnderInvPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extremeVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gnosis", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highGasStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitReservePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limitUpPct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minTimeBetweenRebalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDepositsPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDepositsRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceInitiation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseLoPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDtrBoundaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitReservePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitUpPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinTimeBetweenRebalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingDepositsPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "someVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twapFast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "twapSlow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultSummary",
    data: BytesLike
  ): Result;

  events: {
    "DeployRebalanceStrategy(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "HighGas(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RebalanceAction(address,uint8,uint256,uint256,bool,uint8,uint256,uint8,uint256)": EventFragment;
    "SetBaseLoPct(address,uint256)": EventFragment;
    "SetDtrBoundaries(address,uint256,uint256,uint256,uint256)": EventFragment;
    "SetGasOracle(address,address)": EventFragment;
    "SetGasTolerance(address,uint256)": EventFragment;
    "SetLimitReservePct(address,uint256)": EventFragment;
    "SetLimitUpPct(address,uint256)": EventFragment;
    "SetMinTimeBetweenRebalances(address,uint256)": EventFragment;
    "SetPendingDepositsPct(address,uint256)": EventFragment;
    "SetPriceChange(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployRebalanceStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighGas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBaseLoPct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDtrBoundaries"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGasTolerance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLimitReservePct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLimitUpPct"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetMinTimeBetweenRebalances"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPendingDepositsPct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPriceChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface DeployRebalanceStrategyEventObject {
  sender: string;
  vault: string;
  baseLoPct: BigNumber;
  limitUpPct: BigNumber;
  limitReservePct: BigNumber;
  pendingDepositsPct: BigNumber;
  beginOverInvPct: BigNumber;
  endOverInvPct: BigNumber;
  endUnderInvPct: BigNumber;
  beginUnderInvPct: BigNumber;
}
export type DeployRebalanceStrategyEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  DeployRebalanceStrategyEventObject
>;

export type DeployRebalanceStrategyEventFilter =
  TypedEventFilter<DeployRebalanceStrategyEvent>;

export interface HighGasEventObject {
  sender: string;
  gasPrice: BigNumber;
  highGasStarted: BigNumber;
}
export type HighGasEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  HighGasEventObject
>;

export type HighGasEventFilter = TypedEventFilter<HighGasEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RebalanceActionEventObject {
  sender: string;
  action: number;
  dtr: BigNumber;
  pendingRatio: BigNumber;
  missingData: boolean;
  lastState: number;
  lastPrice: BigNumber;
  currentState: number;
  currentPrice: BigNumber;
}
export type RebalanceActionEvent = TypedEvent<
  [
    string,
    number,
    BigNumber,
    BigNumber,
    boolean,
    number,
    BigNumber,
    number,
    BigNumber
  ],
  RebalanceActionEventObject
>;

export type RebalanceActionEventFilter = TypedEventFilter<RebalanceActionEvent>;

export interface SetBaseLoPctEventObject {
  sender: string;
  baseLoPct: BigNumber;
}
export type SetBaseLoPctEvent = TypedEvent<
  [string, BigNumber],
  SetBaseLoPctEventObject
>;

export type SetBaseLoPctEventFilter = TypedEventFilter<SetBaseLoPctEvent>;

export interface SetDtrBoundariesEventObject {
  sender: string;
  beginOverInvPct: BigNumber;
  endOverInvPct: BigNumber;
  endUnderInvPct: BigNumber;
  beginUnderInvPct: BigNumber;
}
export type SetDtrBoundariesEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  SetDtrBoundariesEventObject
>;

export type SetDtrBoundariesEventFilter =
  TypedEventFilter<SetDtrBoundariesEvent>;

export interface SetGasOracleEventObject {
  sender: string;
  gasOracle: string;
}
export type SetGasOracleEvent = TypedEvent<
  [string, string],
  SetGasOracleEventObject
>;

export type SetGasOracleEventFilter = TypedEventFilter<SetGasOracleEvent>;

export interface SetGasToleranceEventObject {
  sender: string;
  gasTolerance: BigNumber;
}
export type SetGasToleranceEvent = TypedEvent<
  [string, BigNumber],
  SetGasToleranceEventObject
>;

export type SetGasToleranceEventFilter = TypedEventFilter<SetGasToleranceEvent>;

export interface SetLimitReservePctEventObject {
  sender: string;
  limitReservePct: BigNumber;
}
export type SetLimitReservePctEvent = TypedEvent<
  [string, BigNumber],
  SetLimitReservePctEventObject
>;

export type SetLimitReservePctEventFilter =
  TypedEventFilter<SetLimitReservePctEvent>;

export interface SetLimitUpPctEventObject {
  sender: string;
  limitUpPct: BigNumber;
}
export type SetLimitUpPctEvent = TypedEvent<
  [string, BigNumber],
  SetLimitUpPctEventObject
>;

export type SetLimitUpPctEventFilter = TypedEventFilter<SetLimitUpPctEvent>;

export interface SetMinTimeBetweenRebalancesEventObject {
  sender: string;
  minTimeBetweenRebalances: BigNumber;
}
export type SetMinTimeBetweenRebalancesEvent = TypedEvent<
  [string, BigNumber],
  SetMinTimeBetweenRebalancesEventObject
>;

export type SetMinTimeBetweenRebalancesEventFilter =
  TypedEventFilter<SetMinTimeBetweenRebalancesEvent>;

export interface SetPendingDepositsPctEventObject {
  sender: string;
  pendingDepositsPct: BigNumber;
}
export type SetPendingDepositsPctEvent = TypedEvent<
  [string, BigNumber],
  SetPendingDepositsPctEventObject
>;

export type SetPendingDepositsPctEventFilter =
  TypedEventFilter<SetPendingDepositsPctEvent>;

export interface SetPriceChangeEventObject {
  sender: string;
  priceChange: BigNumber;
}
export type SetPriceChangeEvent = TypedEvent<
  [string, BigNumber],
  SetPriceChangeEventObject
>;

export type SetPriceChangeEventFilter = TypedEventFilter<SetPriceChangeEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Rebalancing_regular_v1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Rebalancing_regular_v1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GAS_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    _currentPosition(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [LowHighPositionStructOutput] & { pos: LowHighPositionStructOutput }
    >;

    baseLoPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    beginOverInvPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    beginUnderInvPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentVolatility(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { volatility: BigNumber }>;

    depositTokenRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dtr: BigNumber }>;

    dtrDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    endOverInvPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    endUnderInvPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    executionDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    extremeVolatility(overrides?: CallOverrides): Promise<[BigNumber]>;

    gasOracle(overrides?: CallOverrides): Promise<[string]>;

    gasTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    gnosis(overrides?: CallOverrides): Promise<[string]>;

    highGasStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    highVolatility(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRebalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    limitReservePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    limitUpPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTimeBetweenRebalances(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingDepositsPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingDepositsRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolPrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentPrice_: BigNumber;
        twapSlow_: BigNumber;
        twapFast_: BigNumber;
      }
    >;

    priceChange(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebalanceInitiation(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseLoPct(
      _baseLoPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDtrBoundaries(
      _beginOverInvPct: PromiseOrValue<BigNumberish>,
      _endOverInvPct: PromiseOrValue<BigNumberish>,
      _endUnderInvPct: PromiseOrValue<BigNumberish>,
      _beginUnderInvPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasOracle(
      _gasOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasTolerance(
      _gasTolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLimitReservePct(
      _limitReservePct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLimitUpPct(
      _limitUpPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinTimeBetweenRebalances(
      _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingDepositsPct(
      _pendingDepositsPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceChange(
      _priceChange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simulate(
      overrides?: CallOverrides
    ): Promise<
      [LowHighPositionStructOutput] & { newPos: LowHighPositionStructOutput }
    >;

    someVolatility(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    twapFast(overrides?: CallOverrides): Promise<[number]>;

    twapSlow(overrides?: CallOverrides): Promise<[number]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    vaultAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseTotal_: BigNumber;
        scarceTotal_: BigNumber;
      }
    >;

    vaultSummary(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, number] & {
        vault_: string;
        baseToken_: string;
        scarceToken_: string;
        inverted_: boolean;
        tickSpacing_: number;
      }
    >;
  };

  GAS_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  _currentPosition(
    _vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LowHighPositionStructOutput>;

  baseLoPct(overrides?: CallOverrides): Promise<BigNumber>;

  beginOverInvPct(overrides?: CallOverrides): Promise<BigNumber>;

  beginUnderInvPct(overrides?: CallOverrides): Promise<BigNumber>;

  checkUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentVolatility(overrides?: CallOverrides): Promise<BigNumber>;

  depositTokenRatio(overrides?: CallOverrides): Promise<BigNumber>;

  dtrDelta(overrides?: CallOverrides): Promise<BigNumber>;

  endOverInvPct(overrides?: CallOverrides): Promise<BigNumber>;

  endUnderInvPct(overrides?: CallOverrides): Promise<BigNumber>;

  executionDelay(overrides?: CallOverrides): Promise<BigNumber>;

  extremeVolatility(overrides?: CallOverrides): Promise<BigNumber>;

  gasOracle(overrides?: CallOverrides): Promise<string>;

  gasTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  gnosis(overrides?: CallOverrides): Promise<string>;

  highGasStart(overrides?: CallOverrides): Promise<BigNumber>;

  highVolatility(overrides?: CallOverrides): Promise<BigNumber>;

  lastRebalance(overrides?: CallOverrides): Promise<BigNumber>;

  limitReservePct(overrides?: CallOverrides): Promise<BigNumber>;

  limitUpPct(overrides?: CallOverrides): Promise<BigNumber>;

  minTimeBetweenRebalances(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingDepositsPct(overrides?: CallOverrides): Promise<BigNumber>;

  pendingDepositsRatio(overrides?: CallOverrides): Promise<BigNumber>;

  performUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolPrices(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      currentPrice_: BigNumber;
      twapSlow_: BigNumber;
      twapFast_: BigNumber;
    }
  >;

  priceChange(overrides?: CallOverrides): Promise<BigNumber>;

  rebalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebalanceInitiation(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseLoPct(
    _baseLoPct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDtrBoundaries(
    _beginOverInvPct: PromiseOrValue<BigNumberish>,
    _endOverInvPct: PromiseOrValue<BigNumberish>,
    _endUnderInvPct: PromiseOrValue<BigNumberish>,
    _beginUnderInvPct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasOracle(
    _gasOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasTolerance(
    _gasTolerance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLimitReservePct(
    _limitReservePct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLimitUpPct(
    _limitUpPct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinTimeBetweenRebalances(
    _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingDepositsPct(
    _pendingDepositsPct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceChange(
    _priceChange: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simulate(overrides?: CallOverrides): Promise<LowHighPositionStructOutput>;

  someVolatility(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  twapFast(overrides?: CallOverrides): Promise<number>;

  twapSlow(overrides?: CallOverrides): Promise<number>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  vaultAmounts(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { baseTotal_: BigNumber; scarceTotal_: BigNumber }
  >;

  vaultSummary(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, number] & {
      vault_: string;
      baseToken_: string;
      scarceToken_: string;
      inverted_: boolean;
      tickSpacing_: number;
    }
  >;

  callStatic: {
    GAS_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    _currentPosition(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LowHighPositionStructOutput>;

    baseLoPct(overrides?: CallOverrides): Promise<BigNumber>;

    beginOverInvPct(overrides?: CallOverrides): Promise<BigNumber>;

    beginUnderInvPct(overrides?: CallOverrides): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    currentVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokenRatio(overrides?: CallOverrides): Promise<BigNumber>;

    dtrDelta(overrides?: CallOverrides): Promise<BigNumber>;

    endOverInvPct(overrides?: CallOverrides): Promise<BigNumber>;

    endUnderInvPct(overrides?: CallOverrides): Promise<BigNumber>;

    executionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    extremeVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    gasOracle(overrides?: CallOverrides): Promise<string>;

    gasTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    gnosis(overrides?: CallOverrides): Promise<string>;

    highGasStart(overrides?: CallOverrides): Promise<BigNumber>;

    highVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebalance(overrides?: CallOverrides): Promise<BigNumber>;

    limitReservePct(overrides?: CallOverrides): Promise<BigNumber>;

    limitUpPct(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeBetweenRebalances(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingDepositsPct(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDepositsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolPrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        currentPrice_: BigNumber;
        twapSlow_: BigNumber;
        twapFast_: BigNumber;
      }
    >;

    priceChange(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    rebalanceInitiation(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBaseLoPct(
      _baseLoPct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDtrBoundaries(
      _beginOverInvPct: PromiseOrValue<BigNumberish>,
      _endOverInvPct: PromiseOrValue<BigNumberish>,
      _endUnderInvPct: PromiseOrValue<BigNumberish>,
      _beginUnderInvPct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasOracle(
      _gasOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasTolerance(
      _gasTolerance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimitReservePct(
      _limitReservePct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimitUpPct(
      _limitUpPct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTimeBetweenRebalances(
      _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingDepositsPct(
      _pendingDepositsPct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceChange(
      _priceChange: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    simulate(overrides?: CallOverrides): Promise<LowHighPositionStructOutput>;

    someVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    twapFast(overrides?: CallOverrides): Promise<number>;

    twapSlow(overrides?: CallOverrides): Promise<number>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    vaultAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseTotal_: BigNumber;
        scarceTotal_: BigNumber;
      }
    >;

    vaultSummary(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, number] & {
        vault_: string;
        baseToken_: string;
        scarceToken_: string;
        inverted_: boolean;
        tickSpacing_: number;
      }
    >;
  };

  filters: {
    "DeployRebalanceStrategy(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      vault?: PromiseOrValue<string> | null,
      baseLoPct?: null,
      limitUpPct?: null,
      limitReservePct?: null,
      pendingDepositsPct?: null,
      beginOverInvPct?: null,
      endOverInvPct?: null,
      endUnderInvPct?: null,
      beginUnderInvPct?: null
    ): DeployRebalanceStrategyEventFilter;
    DeployRebalanceStrategy(
      sender?: PromiseOrValue<string> | null,
      vault?: PromiseOrValue<string> | null,
      baseLoPct?: null,
      limitUpPct?: null,
      limitReservePct?: null,
      pendingDepositsPct?: null,
      beginOverInvPct?: null,
      endOverInvPct?: null,
      endUnderInvPct?: null,
      beginUnderInvPct?: null
    ): DeployRebalanceStrategyEventFilter;

    "HighGas(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      gasPrice?: null,
      highGasStarted?: null
    ): HighGasEventFilter;
    HighGas(
      sender?: PromiseOrValue<string> | null,
      gasPrice?: null,
      highGasStarted?: null
    ): HighGasEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RebalanceAction(address,uint8,uint256,uint256,bool,uint8,uint256,uint8,uint256)"(
      sender?: PromiseOrValue<string> | null,
      action?: null,
      dtr?: null,
      pendingRatio?: null,
      missingData?: null,
      lastState?: null,
      lastPrice?: null,
      currentState?: null,
      currentPrice?: null
    ): RebalanceActionEventFilter;
    RebalanceAction(
      sender?: PromiseOrValue<string> | null,
      action?: null,
      dtr?: null,
      pendingRatio?: null,
      missingData?: null,
      lastState?: null,
      lastPrice?: null,
      currentState?: null,
      currentPrice?: null
    ): RebalanceActionEventFilter;

    "SetBaseLoPct(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      baseLoPct?: null
    ): SetBaseLoPctEventFilter;
    SetBaseLoPct(
      sender?: PromiseOrValue<string> | null,
      baseLoPct?: null
    ): SetBaseLoPctEventFilter;

    "SetDtrBoundaries(address,uint256,uint256,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      beginOverInvPct?: null,
      endOverInvPct?: null,
      endUnderInvPct?: null,
      beginUnderInvPct?: null
    ): SetDtrBoundariesEventFilter;
    SetDtrBoundaries(
      sender?: PromiseOrValue<string> | null,
      beginOverInvPct?: null,
      endOverInvPct?: null,
      endUnderInvPct?: null,
      beginUnderInvPct?: null
    ): SetDtrBoundariesEventFilter;

    "SetGasOracle(address,address)"(
      sender?: PromiseOrValue<string> | null,
      gasOracle?: null
    ): SetGasOracleEventFilter;
    SetGasOracle(
      sender?: PromiseOrValue<string> | null,
      gasOracle?: null
    ): SetGasOracleEventFilter;

    "SetGasTolerance(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      gasTolerance?: null
    ): SetGasToleranceEventFilter;
    SetGasTolerance(
      sender?: PromiseOrValue<string> | null,
      gasTolerance?: null
    ): SetGasToleranceEventFilter;

    "SetLimitReservePct(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      limitReservePct?: null
    ): SetLimitReservePctEventFilter;
    SetLimitReservePct(
      sender?: PromiseOrValue<string> | null,
      limitReservePct?: null
    ): SetLimitReservePctEventFilter;

    "SetLimitUpPct(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      limitUpPct?: null
    ): SetLimitUpPctEventFilter;
    SetLimitUpPct(
      sender?: PromiseOrValue<string> | null,
      limitUpPct?: null
    ): SetLimitUpPctEventFilter;

    "SetMinTimeBetweenRebalances(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      minTimeBetweenRebalances?: null
    ): SetMinTimeBetweenRebalancesEventFilter;
    SetMinTimeBetweenRebalances(
      sender?: PromiseOrValue<string> | null,
      minTimeBetweenRebalances?: null
    ): SetMinTimeBetweenRebalancesEventFilter;

    "SetPendingDepositsPct(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      pendingDepositsPct?: null
    ): SetPendingDepositsPctEventFilter;
    SetPendingDepositsPct(
      sender?: PromiseOrValue<string> | null,
      pendingDepositsPct?: null
    ): SetPendingDepositsPctEventFilter;

    "SetPriceChange(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      priceChange?: null
    ): SetPriceChangeEventFilter;
    SetPriceChange(
      sender?: PromiseOrValue<string> | null,
      priceChange?: null
    ): SetPriceChangeEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    GAS_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    _currentPosition(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseLoPct(overrides?: CallOverrides): Promise<BigNumber>;

    beginOverInvPct(overrides?: CallOverrides): Promise<BigNumber>;

    beginUnderInvPct(overrides?: CallOverrides): Promise<BigNumber>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokenRatio(overrides?: CallOverrides): Promise<BigNumber>;

    dtrDelta(overrides?: CallOverrides): Promise<BigNumber>;

    endOverInvPct(overrides?: CallOverrides): Promise<BigNumber>;

    endUnderInvPct(overrides?: CallOverrides): Promise<BigNumber>;

    executionDelay(overrides?: CallOverrides): Promise<BigNumber>;

    extremeVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    gasOracle(overrides?: CallOverrides): Promise<BigNumber>;

    gasTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    gnosis(overrides?: CallOverrides): Promise<BigNumber>;

    highGasStart(overrides?: CallOverrides): Promise<BigNumber>;

    highVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebalance(overrides?: CallOverrides): Promise<BigNumber>;

    limitReservePct(overrides?: CallOverrides): Promise<BigNumber>;

    limitUpPct(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeBetweenRebalances(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDepositsPct(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDepositsRatio(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolPrices(overrides?: CallOverrides): Promise<BigNumber>;

    priceChange(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebalanceInitiation(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseLoPct(
      _baseLoPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDtrBoundaries(
      _beginOverInvPct: PromiseOrValue<BigNumberish>,
      _endOverInvPct: PromiseOrValue<BigNumberish>,
      _endUnderInvPct: PromiseOrValue<BigNumberish>,
      _beginUnderInvPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasOracle(
      _gasOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasTolerance(
      _gasTolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLimitReservePct(
      _limitReservePct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLimitUpPct(
      _limitUpPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinTimeBetweenRebalances(
      _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingDepositsPct(
      _pendingDepositsPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceChange(
      _priceChange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simulate(overrides?: CallOverrides): Promise<BigNumber>;

    someVolatility(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    twapFast(overrides?: CallOverrides): Promise<BigNumber>;

    twapSlow(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    vaultAmounts(overrides?: CallOverrides): Promise<BigNumber>;

    vaultSummary(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GAS_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _currentPosition(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseLoPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beginOverInvPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beginUnderInvPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentVolatility(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTokenRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dtrDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endOverInvPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endUnderInvPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executionDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extremeVolatility(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasTolerance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gnosis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highGasStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highVolatility(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRebalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitReservePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitUpPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTimeBetweenRebalances(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDepositsPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingDepositsRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolPrices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceChange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebalanceInitiation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseLoPct(
      _baseLoPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDtrBoundaries(
      _beginOverInvPct: PromiseOrValue<BigNumberish>,
      _endOverInvPct: PromiseOrValue<BigNumberish>,
      _endUnderInvPct: PromiseOrValue<BigNumberish>,
      _beginUnderInvPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasOracle(
      _gasOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasTolerance(
      _gasTolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLimitReservePct(
      _limitReservePct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLimitUpPct(
      _limitUpPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinTimeBetweenRebalances(
      _minTimeBetweenRebalances: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingDepositsPct(
      _pendingDepositsPct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceChange(
      _priceChange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simulate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    someVolatility(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    twapFast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twapSlow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultAmounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultSummary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
