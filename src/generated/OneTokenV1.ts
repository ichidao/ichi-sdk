/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OneTokenV1Interface extends utils.Interface {
  functions: {
    "MODULE_TYPE()": FunctionFragment;
    "addAsset(address,address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assetAtIndex(uint256)": FunctionFragment;
    "assetCount()": FunctionFragment;
    "assets(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "changeController(address)": FunctionFragment;
    "changeMintMaster(address,address)": FunctionFragment;
    "closeStrategy(address)": FunctionFragment;
    "collateralTokenAtIndex(uint256)": FunctionFragment;
    "collateralTokenCount()": FunctionFragment;
    "controller()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "decreaseStrategyAllowance(address,uint256)": FunctionFragment;
    "executeStrategy(address)": FunctionFragment;
    "fromStrategy(address,address,uint256)": FunctionFragment;
    "getHoldings(address)": FunctionFragment;
    "getMintingRatio(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "increaseStrategyAllowance(address,uint256)": FunctionFragment;
    "init(string,string,address,address,address,address,address)": FunctionFragment;
    "isAsset(address)": FunctionFragment;
    "isCollateral(address)": FunctionFragment;
    "isOtherToken(address)": FunctionFragment;
    "liabilities(address)": FunctionFragment;
    "memberToken()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintMaster()": FunctionFragment;
    "mintingFee()": FunctionFragment;
    "name()": FunctionFragment;
    "oneTokenFactory()": FunctionFragment;
    "otherTokenAtIndex(uint256)": FunctionFragment;
    "otherTokenCount()": FunctionFragment;
    "owner()": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "redemptionFee()": FunctionFragment;
    "removeAsset(address)": FunctionFragment;
    "removeStrategy(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setMintingFee(uint256)": FunctionFragment;
    "setRedemptionFee(uint256)": FunctionFragment;
    "setStrategy(address,address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toStrategy(address,address,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMintingRatio(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MODULE_TYPE"
      | "addAsset"
      | "allowance"
      | "approve"
      | "assetAtIndex"
      | "assetCount"
      | "assets"
      | "balanceOf"
      | "balances"
      | "burn"
      | "burnFrom"
      | "changeController"
      | "changeMintMaster"
      | "closeStrategy"
      | "collateralTokenAtIndex"
      | "collateralTokenCount"
      | "controller"
      | "decimals"
      | "decreaseAllowance"
      | "decreaseStrategyAllowance"
      | "executeStrategy"
      | "fromStrategy"
      | "getHoldings"
      | "getMintingRatio"
      | "increaseAllowance"
      | "increaseStrategyAllowance"
      | "init"
      | "isAsset"
      | "isCollateral"
      | "isOtherToken"
      | "liabilities"
      | "memberToken"
      | "mint"
      | "mintMaster"
      | "mintingFee"
      | "name"
      | "oneTokenFactory"
      | "otherTokenAtIndex"
      | "otherTokenCount"
      | "owner"
      | "redeem"
      | "redemptionFee"
      | "removeAsset"
      | "removeStrategy"
      | "renounceOwnership"
      | "setFactory"
      | "setMintingFee"
      | "setRedemptionFee"
      | "setStrategy"
      | "symbol"
      | "toStrategy"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "updateMintingRatio"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MODULE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMintMaster",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeStrategy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokenAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseStrategyAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeStrategy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fromStrategy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getHoldings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintingRatio",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseStrategyAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOtherToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liabilities",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oneTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "otherTokenAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "otherTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintingFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toStrategy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintingRatio",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MODULE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMintMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseStrategyAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHoldings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintingRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseStrategyAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOtherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintMaster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oneTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "otherTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "otherTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toStrategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintingRatio",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AssetAdded(address,address,address)": EventFragment;
    "AssetRemoved(address,address)": EventFragment;
    "ControllerChanged(address,address)": EventFragment;
    "FromStrategy(address,address,address,uint256)": EventFragment;
    "Initialized(address,string,string,address,address,address,address)": EventFragment;
    "MintMasterChanged(address,address,address)": EventFragment;
    "Minted(address,address,uint256,uint256,uint256)": EventFragment;
    "NewFactory(address,address)": EventFragment;
    "NewMintingFee(address,uint256)": EventFragment;
    "NewRedemptionFee(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Redeemed(address,address,uint256)": EventFragment;
    "StrategyAllowanceDecreased(address,address,address,uint256)": EventFragment;
    "StrategyAllowanceIncreased(address,address,address,uint256)": EventFragment;
    "StrategyClosed(address,address,address)": EventFragment;
    "StrategyExecuted(address,address,address)": EventFragment;
    "StrategyRemoved(address,address,address)": EventFragment;
    "StrategySet(address,address,address,uint256)": EventFragment;
    "ToStrategy(address,address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FromStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintMasterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMintingFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRedemptionFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAllowanceDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyAllowanceIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToStrategy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AssetAddedEventObject {
  sender: string;
  token: string;
  oracle: string;
}
export type AssetAddedEvent = TypedEvent<
  [string, string, string],
  AssetAddedEventObject
>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export interface AssetRemovedEventObject {
  sender: string;
  token: string;
}
export type AssetRemovedEvent = TypedEvent<
  [string, string],
  AssetRemovedEventObject
>;

export type AssetRemovedEventFilter = TypedEventFilter<AssetRemovedEvent>;

export interface ControllerChangedEventObject {
  sender: string;
  controller: string;
}
export type ControllerChangedEvent = TypedEvent<
  [string, string],
  ControllerChangedEventObject
>;

export type ControllerChangedEventFilter =
  TypedEventFilter<ControllerChangedEvent>;

export interface FromStrategyEventObject {
  sender: string;
  strategy: string;
  token: string;
  amount: BigNumber;
}
export type FromStrategyEvent = TypedEvent<
  [string, string, string, BigNumber],
  FromStrategyEventObject
>;

export type FromStrategyEventFilter = TypedEventFilter<FromStrategyEvent>;

export interface InitializedEventObject {
  sender: string;
  name: string;
  symbol: string;
  controller: string;
  mintMaster: string;
  memberToken: string;
  collateral: string;
}
export type InitializedEvent = TypedEvent<
  [string, string, string, string, string, string, string],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MintMasterChangedEventObject {
  sender: string;
  mintMaster: string;
  oneTokenOracle: string;
}
export type MintMasterChangedEvent = TypedEvent<
  [string, string, string],
  MintMasterChangedEventObject
>;

export type MintMasterChangedEventFilter =
  TypedEventFilter<MintMasterChangedEvent>;

export interface MintedEventObject {
  sender: string;
  collateral: string;
  oneTokens: BigNumber;
  memberTokens: BigNumber;
  collateralTokens: BigNumber;
}
export type MintedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  MintedEventObject
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export interface NewFactoryEventObject {
  sender: string;
  factory: string;
}
export type NewFactoryEvent = TypedEvent<
  [string, string],
  NewFactoryEventObject
>;

export type NewFactoryEventFilter = TypedEventFilter<NewFactoryEvent>;

export interface NewMintingFeeEventObject {
  sender: string;
  fee: BigNumber;
}
export type NewMintingFeeEvent = TypedEvent<
  [string, BigNumber],
  NewMintingFeeEventObject
>;

export type NewMintingFeeEventFilter = TypedEventFilter<NewMintingFeeEvent>;

export interface NewRedemptionFeeEventObject {
  sender: string;
  fee: BigNumber;
}
export type NewRedemptionFeeEvent = TypedEvent<
  [string, BigNumber],
  NewRedemptionFeeEventObject
>;

export type NewRedemptionFeeEventFilter =
  TypedEventFilter<NewRedemptionFeeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RedeemedEventObject {
  sender: string;
  collateral: string;
  amount: BigNumber;
}
export type RedeemedEvent = TypedEvent<
  [string, string, BigNumber],
  RedeemedEventObject
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface StrategyAllowanceDecreasedEventObject {
  sender: string;
  token: string;
  strategy: string;
  amount: BigNumber;
}
export type StrategyAllowanceDecreasedEvent = TypedEvent<
  [string, string, string, BigNumber],
  StrategyAllowanceDecreasedEventObject
>;

export type StrategyAllowanceDecreasedEventFilter =
  TypedEventFilter<StrategyAllowanceDecreasedEvent>;

export interface StrategyAllowanceIncreasedEventObject {
  sender: string;
  token: string;
  strategy: string;
  amount: BigNumber;
}
export type StrategyAllowanceIncreasedEvent = TypedEvent<
  [string, string, string, BigNumber],
  StrategyAllowanceIncreasedEventObject
>;

export type StrategyAllowanceIncreasedEventFilter =
  TypedEventFilter<StrategyAllowanceIncreasedEvent>;

export interface StrategyClosedEventObject {
  sender: string;
  token: string;
  strategy: string;
}
export type StrategyClosedEvent = TypedEvent<
  [string, string, string],
  StrategyClosedEventObject
>;

export type StrategyClosedEventFilter = TypedEventFilter<StrategyClosedEvent>;

export interface StrategyExecutedEventObject {
  sender: string;
  token: string;
  strategy: string;
}
export type StrategyExecutedEvent = TypedEvent<
  [string, string, string],
  StrategyExecutedEventObject
>;

export type StrategyExecutedEventFilter =
  TypedEventFilter<StrategyExecutedEvent>;

export interface StrategyRemovedEventObject {
  sender: string;
  token: string;
  strategy: string;
}
export type StrategyRemovedEvent = TypedEvent<
  [string, string, string],
  StrategyRemovedEventObject
>;

export type StrategyRemovedEventFilter = TypedEventFilter<StrategyRemovedEvent>;

export interface StrategySetEventObject {
  sender: string;
  token: string;
  strategy: string;
  allowance: BigNumber;
}
export type StrategySetEvent = TypedEvent<
  [string, string, string, BigNumber],
  StrategySetEventObject
>;

export type StrategySetEventFilter = TypedEventFilter<StrategySetEvent>;

export interface ToStrategyEventObject {
  sender: string;
  strategy: string;
  token: string;
  amount: BigNumber;
}
export type ToStrategyEvent = TypedEvent<
  [string, string, string, BigNumber],
  ToStrategyEventObject
>;

export type ToStrategyEventFilter = TypedEventFilter<ToStrategyEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface OneTokenV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OneTokenV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<[string]>;

    addAsset(
      token: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    assets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; strategy: string }>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { inVault: BigNumber; inStrategy: BigNumber }
    >;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeController(
      controller_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeMintMaster(
      mintMaster_: PromiseOrValue<string>,
      oneTokenOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeStrategy(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collateralTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collateralTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseStrategyAllowance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeStrategy(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fromStrategy(
      strategy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getHoldings(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vaultBalance: BigNumber;
        strategyBalance: BigNumber;
      }
    >;

    getMintingRatio(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ratio: BigNumber; maxOrderVolume: BigNumber }
    >;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseStrategyAllowance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      oneTokenOracle_: PromiseOrValue<string>,
      controller_: PromiseOrValue<string>,
      mintMaster_: PromiseOrValue<string>,
      memberToken_: PromiseOrValue<string>,
      collateral_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollateral(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOtherToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liabilities(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    memberToken(overrides?: CallOverrides): Promise<[string]>;

    mint(
      collateralToken: PromiseOrValue<string>,
      oneTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintMaster(overrides?: CallOverrides): Promise<[string]>;

    mintingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    oneTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    otherTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    otherTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      collateral: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redemptionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeStrategy(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      newFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMintingFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategy(
      token: PromiseOrValue<string>,
      strategy: PromiseOrValue<string>,
      allowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toStrategy(
      strategy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMintingRatio(
      collateralToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MODULE_TYPE(overrides?: CallOverrides): Promise<string>;

  addAsset(
    token: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  assetCount(overrides?: CallOverrides): Promise<BigNumber>;

  assets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { oracle: string; strategy: string }>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { inVault: BigNumber; inStrategy: BigNumber }
  >;

  burn(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeController(
    controller_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeMintMaster(
    mintMaster_: PromiseOrValue<string>,
    oneTokenOracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeStrategy(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collateralTokenAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  collateralTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseStrategyAllowance(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeStrategy(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fromStrategy(
    strategy: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getHoldings(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      vaultBalance: BigNumber;
      strategyBalance: BigNumber;
    }
  >;

  getMintingRatio(
    collateralToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { ratio: BigNumber; maxOrderVolume: BigNumber }
  >;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseStrategyAllowance(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  init(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    oneTokenOracle_: PromiseOrValue<string>,
    controller_: PromiseOrValue<string>,
    mintMaster_: PromiseOrValue<string>,
    memberToken_: PromiseOrValue<string>,
    collateral_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAsset(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollateral(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOtherToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liabilities(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  memberToken(overrides?: CallOverrides): Promise<string>;

  mint(
    collateralToken: PromiseOrValue<string>,
    oneTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintMaster(overrides?: CallOverrides): Promise<string>;

  mintingFee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  oneTokenFactory(overrides?: CallOverrides): Promise<string>;

  otherTokenAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  otherTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeem(
    collateral: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

  removeAsset(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeStrategy(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    newFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMintingFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategy(
    token: PromiseOrValue<string>,
    strategy: PromiseOrValue<string>,
    allowance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toStrategy(
    strategy: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMintingRatio(
    collateralToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<string>;

    addAsset(
      token: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    assetCount(overrides?: CallOverrides): Promise<BigNumber>;

    assets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; strategy: string }>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { inVault: BigNumber; inStrategy: BigNumber }
    >;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeController(
      controller_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMintMaster(
      mintMaster_: PromiseOrValue<string>,
      oneTokenOracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeStrategy(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    collateralTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseStrategyAllowance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeStrategy(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fromStrategy(
      strategy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getHoldings(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        vaultBalance: BigNumber;
        strategyBalance: BigNumber;
      }
    >;

    getMintingRatio(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ratio: BigNumber; maxOrderVolume: BigNumber }
    >;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseStrategyAllowance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      oneTokenOracle_: PromiseOrValue<string>,
      controller_: PromiseOrValue<string>,
      mintMaster_: PromiseOrValue<string>,
      memberToken_: PromiseOrValue<string>,
      collateral_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollateral(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOtherToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liabilities(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberToken(overrides?: CallOverrides): Promise<string>;

    mint(
      collateralToken: PromiseOrValue<string>,
      oneTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMaster(overrides?: CallOverrides): Promise<string>;

    mintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    oneTokenFactory(overrides?: CallOverrides): Promise<string>;

    otherTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    otherTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeem(
      collateral: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeStrategy(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFactory(
      newFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintingFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategy(
      token: PromiseOrValue<string>,
      strategy: PromiseOrValue<string>,
      allowance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toStrategy(
      strategy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMintingRatio(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { ratio: BigNumber; maxOrderVolume: BigNumber }
    >;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "AssetAdded(address,address,address)"(
      sender?: null,
      token?: null,
      oracle?: null
    ): AssetAddedEventFilter;
    AssetAdded(
      sender?: null,
      token?: null,
      oracle?: null
    ): AssetAddedEventFilter;

    "AssetRemoved(address,address)"(
      sender?: null,
      token?: null
    ): AssetRemovedEventFilter;
    AssetRemoved(sender?: null, token?: null): AssetRemovedEventFilter;

    "ControllerChanged(address,address)"(
      sender?: null,
      controller?: null
    ): ControllerChangedEventFilter;
    ControllerChanged(
      sender?: null,
      controller?: null
    ): ControllerChangedEventFilter;

    "FromStrategy(address,address,address,uint256)"(
      sender?: null,
      strategy?: null,
      token?: null,
      amount?: null
    ): FromStrategyEventFilter;
    FromStrategy(
      sender?: null,
      strategy?: null,
      token?: null,
      amount?: null
    ): FromStrategyEventFilter;

    "Initialized(address,string,string,address,address,address,address)"(
      sender?: null,
      name?: null,
      symbol?: null,
      controller?: null,
      mintMaster?: null,
      memberToken?: null,
      collateral?: null
    ): InitializedEventFilter;
    Initialized(
      sender?: null,
      name?: null,
      symbol?: null,
      controller?: null,
      mintMaster?: null,
      memberToken?: null,
      collateral?: null
    ): InitializedEventFilter;

    "MintMasterChanged(address,address,address)"(
      sender?: null,
      mintMaster?: null,
      oneTokenOracle?: null
    ): MintMasterChangedEventFilter;
    MintMasterChanged(
      sender?: null,
      mintMaster?: null,
      oneTokenOracle?: null
    ): MintMasterChangedEventFilter;

    "Minted(address,address,uint256,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      oneTokens?: null,
      memberTokens?: null,
      collateralTokens?: null
    ): MintedEventFilter;
    Minted(
      sender?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      oneTokens?: null,
      memberTokens?: null,
      collateralTokens?: null
    ): MintedEventFilter;

    "NewFactory(address,address)"(
      sender?: null,
      factory?: null
    ): NewFactoryEventFilter;
    NewFactory(sender?: null, factory?: null): NewFactoryEventFilter;

    "NewMintingFee(address,uint256)"(
      sender?: null,
      fee?: null
    ): NewMintingFeeEventFilter;
    NewMintingFee(sender?: null, fee?: null): NewMintingFeeEventFilter;

    "NewRedemptionFee(address,uint256)"(
      sender?: null,
      fee?: null
    ): NewRedemptionFeeEventFilter;
    NewRedemptionFee(sender?: null, fee?: null): NewRedemptionFeeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Redeemed(address,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      amount?: null
    ): RedeemedEventFilter;
    Redeemed(
      sender?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      amount?: null
    ): RedeemedEventFilter;

    "StrategyAllowanceDecreased(address,address,address,uint256)"(
      sender?: null,
      token?: null,
      strategy?: null,
      amount?: null
    ): StrategyAllowanceDecreasedEventFilter;
    StrategyAllowanceDecreased(
      sender?: null,
      token?: null,
      strategy?: null,
      amount?: null
    ): StrategyAllowanceDecreasedEventFilter;

    "StrategyAllowanceIncreased(address,address,address,uint256)"(
      sender?: null,
      token?: null,
      strategy?: null,
      amount?: null
    ): StrategyAllowanceIncreasedEventFilter;
    StrategyAllowanceIncreased(
      sender?: null,
      token?: null,
      strategy?: null,
      amount?: null
    ): StrategyAllowanceIncreasedEventFilter;

    "StrategyClosed(address,address,address)"(
      sender?: null,
      token?: null,
      strategy?: null
    ): StrategyClosedEventFilter;
    StrategyClosed(
      sender?: null,
      token?: null,
      strategy?: null
    ): StrategyClosedEventFilter;

    "StrategyExecuted(address,address,address)"(
      sender?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      strategy?: PromiseOrValue<string> | null
    ): StrategyExecutedEventFilter;
    StrategyExecuted(
      sender?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      strategy?: PromiseOrValue<string> | null
    ): StrategyExecutedEventFilter;

    "StrategyRemoved(address,address,address)"(
      sender?: null,
      token?: null,
      strategy?: null
    ): StrategyRemovedEventFilter;
    StrategyRemoved(
      sender?: null,
      token?: null,
      strategy?: null
    ): StrategyRemovedEventFilter;

    "StrategySet(address,address,address,uint256)"(
      sender?: null,
      token?: null,
      strategy?: null,
      allowance?: null
    ): StrategySetEventFilter;
    StrategySet(
      sender?: null,
      token?: null,
      strategy?: null,
      allowance?: null
    ): StrategySetEventFilter;

    "ToStrategy(address,address,address,uint256)"(
      sender?: null,
      strategy?: null,
      token?: null,
      amount?: null
    ): ToStrategyEventFilter;
    ToStrategy(
      sender?: null,
      strategy?: null,
      token?: null,
      amount?: null
    ): ToStrategyEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      token: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetCount(overrides?: CallOverrides): Promise<BigNumber>;

    assets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeController(
      controller_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeMintMaster(
      mintMaster_: PromiseOrValue<string>,
      oneTokenOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeStrategy(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collateralTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseStrategyAllowance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeStrategy(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fromStrategy(
      strategy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getHoldings(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintingRatio(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseStrategyAllowance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      oneTokenOracle_: PromiseOrValue<string>,
      controller_: PromiseOrValue<string>,
      mintMaster_: PromiseOrValue<string>,
      memberToken_: PromiseOrValue<string>,
      collateral_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollateral(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOtherToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liabilities(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberToken(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      collateralToken: PromiseOrValue<string>,
      oneTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintMaster(overrides?: CallOverrides): Promise<BigNumber>;

    mintingFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    oneTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    otherTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    otherTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      collateral: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redemptionFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeStrategy(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactory(
      newFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMintingFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRedemptionFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategy(
      token: PromiseOrValue<string>,
      strategy: PromiseOrValue<string>,
      allowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toStrategy(
      strategy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMintingRatio(
      collateralToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAsset(
      token: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeController(
      controller_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeMintMaster(
      mintMaster_: PromiseOrValue<string>,
      oneTokenOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeStrategy(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collateralTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseStrategyAllowance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeStrategy(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fromStrategy(
      strategy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getHoldings(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintingRatio(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseStrategyAllowance(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      oneTokenOracle_: PromiseOrValue<string>,
      controller_: PromiseOrValue<string>,
      mintMaster_: PromiseOrValue<string>,
      memberToken_: PromiseOrValue<string>,
      collateral_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollateral(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOtherToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liabilities(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      collateralToken: PromiseOrValue<string>,
      oneTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oneTokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otherTokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    otherTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      collateral: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redemptionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeStrategy(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      newFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMintingFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategy(
      token: PromiseOrValue<string>,
      strategy: PromiseOrValue<string>,
      allowance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toStrategy(
      strategy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMintingRatio(
      collateralToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
