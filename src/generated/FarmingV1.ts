/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FarmingV1Interface extends utils.Interface {
  functions: {
    "ichi()": FunctionFragment;
    "ichiEthOracle()": FunctionFragment;
    "ichiPerBlock()": FunctionFragment;
    "oneFactorContract()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "wethAddress()": FunctionFragment;
    "initialize(address,uint256,address,address,address)": FunctionFragment;
    "setMaxWinnersPerBlock(uint256,uint256)": FunctionFragment;
    "setMaxTransactionLoop(uint256,uint256)": FunctionFragment;
    "setIchiEthOracle(address)": FunctionFragment;
    "setWethAddress(address)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "setNonReentrant(bool)": FunctionFragment;
    "gasTank(uint256)": FunctionFragment;
    "getMaxTransactionLoop(uint256)": FunctionFragment;
    "getMaxWinnersPerBlock(uint256)": FunctionFragment;
    "getBonusToRealRatio(uint256)": FunctionFragment;
    "setBonusToRealRatio(uint256,uint256)": FunctionFragment;
    "lastRewardsBlock(uint256)": FunctionFragment;
    "lastRewardsBonusBlock(uint256)": FunctionFragment;
    "startBlock(uint256)": FunctionFragment;
    "getPoolToken(uint256)": FunctionFragment;
    "getAllocPoint(uint256)": FunctionFragment;
    "getAllocPerShare(uint256)": FunctionFragment;
    "ichiReward(uint256)": FunctionFragment;
    "getLPSupply(uint256)": FunctionFragment;
    "endBlock(uint256)": FunctionFragment;
    "add(uint256,address,bool,uint256,uint256)": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "pendingIchi(uint256,address)": FunctionFragment;
    "pendingBonusIchi(uint256,address)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "setFactorContract(address)": FunctionFragment;
    "updateBonusRewards(uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "findBlockNumberCutoff(uint256,uint256)": FunctionFragment;
    "treeRootNode(uint256)": FunctionFragment;
    "firstValue(uint256)": FunctionFragment;
    "lastValue(uint256)": FunctionFragment;
    "nextValue(uint256,uint256)": FunctionFragment;
    "prevValue(uint256,uint256)": FunctionFragment;
    "valueExists(uint256,uint256)": FunctionFragment;
    "keyValueExists(uint256,bytes32,uint256)": FunctionFragment;
    "getNode(uint256,uint256)": FunctionFragment;
    "getValueKey(uint256,uint256,uint256)": FunctionFragment;
    "getValueKeyRaw(uint256,uint256,uint256)": FunctionFragment;
    "valueKeyCount(uint256)": FunctionFragment;
    "valuePercentile(uint256,uint256)": FunctionFragment;
    "valuePermil(uint256,uint256)": FunctionFragment;
    "valueAtPercentile(uint256,uint256)": FunctionFragment;
    "valueAtPermil(uint256,uint256)": FunctionFragment;
    "medianValue(uint256)": FunctionFragment;
    "valueRank(uint256,uint256)": FunctionFragment;
    "valuesBelow(uint256,uint256)": FunctionFragment;
    "valuesAbove(uint256,uint256)": FunctionFragment;
    "valueAtRank(uint256,uint256)": FunctionFragment;
    "valueAtRankReverse(uint256,uint256)": FunctionFragment;
    "valueRankReverse(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ichi"
      | "ichiEthOracle"
      | "ichiPerBlock"
      | "oneFactorContract"
      | "owner"
      | "renounceOwnership"
      | "totalAllocPoint"
      | "transferOwnership"
      | "userInfo"
      | "wethAddress"
      | "initialize"
      | "setMaxWinnersPerBlock"
      | "setMaxTransactionLoop"
      | "setIchiEthOracle"
      | "setWethAddress"
      | "poolLength"
      | "setNonReentrant"
      | "gasTank"
      | "getMaxTransactionLoop"
      | "getMaxWinnersPerBlock"
      | "getBonusToRealRatio"
      | "setBonusToRealRatio"
      | "lastRewardsBlock"
      | "lastRewardsBonusBlock"
      | "startBlock"
      | "getPoolToken"
      | "getAllocPoint"
      | "getAllocPerShare"
      | "ichiReward"
      | "getLPSupply"
      | "endBlock"
      | "add"
      | "set"
      | "pendingIchi"
      | "pendingBonusIchi"
      | "massUpdatePools"
      | "updatePool"
      | "setFactorContract"
      | "updateBonusRewards"
      | "deposit"
      | "withdraw"
      | "claimRewards"
      | "emergencyWithdraw"
      | "findBlockNumberCutoff"
      | "treeRootNode"
      | "firstValue"
      | "lastValue"
      | "nextValue"
      | "prevValue"
      | "valueExists"
      | "keyValueExists"
      | "getNode"
      | "getValueKey"
      | "getValueKeyRaw"
      | "valueKeyCount"
      | "valuePercentile"
      | "valuePermil"
      | "valueAtPercentile"
      | "valueAtPermil"
      | "medianValue"
      | "valueRank"
      | "valuesBelow"
      | "valuesAbove"
      | "valueAtRank"
      | "valueAtRankReverse"
      | "valueRankReverse"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ichi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ichiEthOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ichiPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneFactorContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWinnersPerBlock",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTransactionLoop",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIchiEthOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWethAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNonReentrant",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "gasTank",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTransactionLoop",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxWinnersPerBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBonusToRealRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBonusToRealRatio",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardsBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardsBonusBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocPoint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocPerShare",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ichiReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingIchi",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingBonusIchi",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactorContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBonusRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "findBlockNumberCutoff",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "treeRootNode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "firstValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextValue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "prevValue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueExists",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "keyValueExists",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNode",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueKey",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueKeyRaw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "valueKeyCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valuePercentile",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valuePermil",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueAtPercentile",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueAtPermil",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "medianValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueRank",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valuesBelow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valuesAbove",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueAtRank",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueAtRankReverse",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "valueRankReverse",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "ichi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ichiEthOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ichiPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneFactorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWinnersPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTransactionLoop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIchiEthOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNonReentrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasTank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTransactionLoop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxWinnersPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBonusToRealRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBonusToRealRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardsBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardsBonusBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ichiReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLPSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingIchi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingBonusIchi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFactorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBonusRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findBlockNumberCutoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treeRootNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "firstValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prevValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valueExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyValueExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValueKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueKeyRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueKeyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valuePercentile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valuePermil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueAtPercentile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueAtPermil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "medianValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valueRank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valuesBelow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valuesAbove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueAtRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueAtRankReverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueRankReverse",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "LogGas(uint256,uint256,uint256,uint256)": EventFragment;
    "LogIchiPerWinner(uint256,uint256,uint256)": EventFragment;
    "LogTree(string,uint256,bytes32,uint256)": EventFragment;
    "NewMaxBlock(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogGas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogIchiPerWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTree"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMaxBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface LogGasEventObject {
  index: BigNumber;
  gasPrice: BigNumber;
  gasLimit: BigNumber;
  gasUsed: BigNumber;
}
export type LogGasEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogGasEventObject
>;

export type LogGasEventFilter = TypedEventFilter<LogGasEvent>;

export interface LogIchiPerWinnerEventObject {
  blockNumber: BigNumber;
  winners: BigNumber;
  ichiPaid: BigNumber;
}
export type LogIchiPerWinnerEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogIchiPerWinnerEventObject
>;

export type LogIchiPerWinnerEventFilter =
  TypedEventFilter<LogIchiPerWinnerEvent>;

export interface LogTreeEventObject {
  action: string;
  pid: BigNumber;
  key: string;
  value: BigNumber;
}
export type LogTreeEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  LogTreeEventObject
>;

export type LogTreeEventFilter = TypedEventFilter<LogTreeEvent>;

export interface NewMaxBlockEventObject {
  maxLoops: BigNumber;
}
export type NewMaxBlockEvent = TypedEvent<[BigNumber], NewMaxBlockEventObject>;

export type NewMaxBlockEventFilter = TypedEventFilter<NewMaxBlockEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface FarmingV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FarmingV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ichi(overrides?: CallOverrides): Promise<[string]>;

    ichiEthOracle(overrides?: CallOverrides): Promise<[string]>;

    ichiPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    oneFactorContract(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        bonusReward: BigNumber;
      }
    >;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _ichi: PromiseOrValue<string>,
      _ichiPerBlock: PromiseOrValue<BigNumberish>,
      _oneFactorContract: PromiseOrValue<string>,
      _ichiEthOracle: PromiseOrValue<string>,
      _wethAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxWinnersPerBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTransactionLoop(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIchiEthOracle(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWethAddress(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    setNonReentrant(
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gasTank(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxTransactionLoop(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxWinnersPerBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBonusToRealRatio(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBonusToRealRatio(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastRewardsBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastRewardsBonusBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolToken(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllocPoint(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllocPerShare(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ichiReward(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLPSupply(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    endBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      _startBlock: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set(
      _poolID: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingIchi(
      _poolID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingBonusIchi(
      _poolID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    massUpdatePools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactorContract(
      contract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBonusRewards(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _poolID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    findBlockNumberCutoff(
      _totalRanks: PromiseOrValue<BigNumberish>,
      _currentBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    treeRootNode(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    firstValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    lastValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    nextValue(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    prevValue(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    valueExists(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _exists: boolean }>;

    keyValueExists(
      _poolID: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _exists: boolean }>;

    getNode(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber] & {
        _parent: BigNumber;
        _left: BigNumber;
        _right: BigNumber;
        _red: boolean;
        _keyCount: BigNumber;
        _count: BigNumber;
      }
    >;

    getValueKey(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { _key: string }>;

    getValueKeyRaw(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    valueKeyCount(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _count: BigNumber }>;

    valuePercentile(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _percentile: BigNumber }>;

    valuePermil(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _permil: BigNumber }>;

    valueAtPercentile(
      _poolID: PromiseOrValue<BigNumberish>,
      _percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    valueAtPermil(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    medianValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    valueRank(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rank: BigNumber }>;

    valuesBelow(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _below: BigNumber }>;

    valuesAbove(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _above: BigNumber }>;

    valueAtRank(
      _poolID: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    valueAtRankReverse(
      _poolID: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    valueRankReverse(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  ichi(overrides?: CallOverrides): Promise<string>;

  ichiEthOracle(overrides?: CallOverrides): Promise<string>;

  ichiPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  oneFactorContract(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      bonusReward: BigNumber;
    }
  >;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  initialize(
    _ichi: PromiseOrValue<string>,
    _ichiPerBlock: PromiseOrValue<BigNumberish>,
    _oneFactorContract: PromiseOrValue<string>,
    _ichiEthOracle: PromiseOrValue<string>,
    _wethAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxWinnersPerBlock(
    _poolID: PromiseOrValue<BigNumberish>,
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTransactionLoop(
    _poolID: PromiseOrValue<BigNumberish>,
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIchiEthOracle(
    address_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWethAddress(
    address_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  setNonReentrant(
    _val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gasTank(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxTransactionLoop(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxWinnersPerBlock(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBonusToRealRatio(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBonusToRealRatio(
    _poolID: PromiseOrValue<BigNumberish>,
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastRewardsBlock(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRewardsBonusBlock(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startBlock(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolToken(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllocPoint(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllocPerShare(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ichiReward(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLPSupply(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  endBlock(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  add(
    _allocPoint: PromiseOrValue<BigNumberish>,
    _lpToken: PromiseOrValue<string>,
    _withUpdate: PromiseOrValue<boolean>,
    _startBlock: PromiseOrValue<BigNumberish>,
    _endBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set(
    _poolID: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingIchi(
    _poolID: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingBonusIchi(
    _poolID: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  massUpdatePools(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactorContract(
    contract_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBonusRewards(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _poolID: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  findBlockNumberCutoff(
    _totalRanks: PromiseOrValue<BigNumberish>,
    _currentBlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  treeRootNode(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  firstValue(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastValue(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextValue(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prevValue(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueExists(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keyValueExists(
    _poolID: PromiseOrValue<BigNumberish>,
    key: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNode(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber] & {
      _parent: BigNumber;
      _left: BigNumber;
      _right: BigNumber;
      _red: boolean;
      _keyCount: BigNumber;
      _count: BigNumber;
    }
  >;

  getValueKey(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    row: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getValueKeyRaw(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    row: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  valueKeyCount(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valuePercentile(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valuePermil(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueAtPercentile(
    _poolID: PromiseOrValue<BigNumberish>,
    _percentile: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueAtPermil(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  medianValue(
    _poolID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueRank(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valuesBelow(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valuesAbove(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueAtRank(
    _poolID: PromiseOrValue<BigNumberish>,
    _rank: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueAtRankReverse(
    _poolID: PromiseOrValue<BigNumberish>,
    _rank: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueRankReverse(
    _poolID: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ichi(overrides?: CallOverrides): Promise<string>;

    ichiEthOracle(overrides?: CallOverrides): Promise<string>;

    ichiPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    oneFactorContract(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        bonusReward: BigNumber;
      }
    >;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    initialize(
      _ichi: PromiseOrValue<string>,
      _ichiPerBlock: PromiseOrValue<BigNumberish>,
      _oneFactorContract: PromiseOrValue<string>,
      _ichiEthOracle: PromiseOrValue<string>,
      _wethAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWinnersPerBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTransactionLoop(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIchiEthOracle(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWethAddress(
      address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    setNonReentrant(
      _val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gasTank(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTransactionLoop(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxWinnersPerBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBonusToRealRatio(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBonusToRealRatio(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRewardsBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRewardsBonusBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolToken(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllocPoint(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocPerShare(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ichiReward(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLPSupply(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      _startBlock: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    set(
      _poolID: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingIchi(
      _poolID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingBonusIchi(
      _poolID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    updatePool(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactorContract(
      contract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBonusRewards(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _poolID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    findBlockNumberCutoff(
      _totalRanks: PromiseOrValue<BigNumberish>,
      _currentBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treeRootNode(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextValue(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevValue(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueExists(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keyValueExists(
      _poolID: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNode(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber, BigNumber] & {
        _parent: BigNumber;
        _left: BigNumber;
        _right: BigNumber;
        _red: boolean;
        _keyCount: BigNumber;
        _count: BigNumber;
      }
    >;

    getValueKey(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getValueKeyRaw(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    valueKeyCount(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valuePercentile(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valuePermil(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAtPercentile(
      _poolID: PromiseOrValue<BigNumberish>,
      _percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAtPermil(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    medianValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueRank(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valuesBelow(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valuesAbove(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAtRank(
      _poolID: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAtRankReverse(
      _poolID: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueRankReverse(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "LogGas(uint256,uint256,uint256,uint256)"(
      index?: null,
      gasPrice?: null,
      gasLimit?: null,
      gasUsed?: null
    ): LogGasEventFilter;
    LogGas(
      index?: null,
      gasPrice?: null,
      gasLimit?: null,
      gasUsed?: null
    ): LogGasEventFilter;

    "LogIchiPerWinner(uint256,uint256,uint256)"(
      blockNumber?: null,
      winners?: null,
      ichiPaid?: null
    ): LogIchiPerWinnerEventFilter;
    LogIchiPerWinner(
      blockNumber?: null,
      winners?: null,
      ichiPaid?: null
    ): LogIchiPerWinnerEventFilter;

    "LogTree(string,uint256,bytes32,uint256)"(
      action?: null,
      pid?: PromiseOrValue<BigNumberish> | null,
      key?: null,
      value?: null
    ): LogTreeEventFilter;
    LogTree(
      action?: null,
      pid?: PromiseOrValue<BigNumberish> | null,
      key?: null,
      value?: null
    ): LogTreeEventFilter;

    "NewMaxBlock(uint256)"(maxLoops?: null): NewMaxBlockEventFilter;
    NewMaxBlock(maxLoops?: null): NewMaxBlockEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    ichi(overrides?: CallOverrides): Promise<BigNumber>;

    ichiEthOracle(overrides?: CallOverrides): Promise<BigNumber>;

    ichiPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    oneFactorContract(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ichi: PromiseOrValue<string>,
      _ichiPerBlock: PromiseOrValue<BigNumberish>,
      _oneFactorContract: PromiseOrValue<string>,
      _ichiEthOracle: PromiseOrValue<string>,
      _wethAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxWinnersPerBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTransactionLoop(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIchiEthOracle(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWethAddress(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    setNonReentrant(
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gasTank(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTransactionLoop(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxWinnersPerBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBonusToRealRatio(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBonusToRealRatio(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastRewardsBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRewardsBonusBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolToken(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocPoint(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocPerShare(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ichiReward(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLPSupply(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      _startBlock: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set(
      _poolID: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingIchi(
      _poolID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingBonusIchi(
      _poolID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePool(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactorContract(
      contract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBonusRewards(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _poolID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    findBlockNumberCutoff(
      _totalRanks: PromiseOrValue<BigNumberish>,
      _currentBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    treeRootNode(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextValue(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevValue(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueExists(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyValueExists(
      _poolID: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNode(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueKey(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueKeyRaw(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueKeyCount(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valuePercentile(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valuePermil(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAtPercentile(
      _poolID: PromiseOrValue<BigNumberish>,
      _percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAtPermil(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    medianValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueRank(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valuesBelow(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valuesAbove(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAtRank(
      _poolID: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueAtRankReverse(
      _poolID: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueRankReverse(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ichi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ichiEthOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ichiPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oneFactorContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _ichi: PromiseOrValue<string>,
      _ichiPerBlock: PromiseOrValue<BigNumberish>,
      _oneFactorContract: PromiseOrValue<string>,
      _ichiEthOracle: PromiseOrValue<string>,
      _wethAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxWinnersPerBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTransactionLoop(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIchiEthOracle(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWethAddress(
      address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNonReentrant(
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gasTank(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTransactionLoop(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxWinnersPerBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBonusToRealRatio(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBonusToRealRatio(
      _poolID: PromiseOrValue<BigNumberish>,
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastRewardsBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRewardsBonusBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolToken(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocPoint(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocPerShare(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ichiReward(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLPSupply(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endBlock(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      _startBlock: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _poolID: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingIchi(
      _poolID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingBonusIchi(
      _poolID: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactorContract(
      contract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBonusRewards(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _poolID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    findBlockNumberCutoff(
      _totalRanks: PromiseOrValue<BigNumberish>,
      _currentBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treeRootNode(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextValue(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevValue(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueExists(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyValueExists(
      _poolID: PromiseOrValue<BigNumberish>,
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNode(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueKey(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueKeyRaw(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      row: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueKeyCount(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valuePercentile(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valuePermil(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueAtPercentile(
      _poolID: PromiseOrValue<BigNumberish>,
      _percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueAtPermil(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    medianValue(
      _poolID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueRank(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valuesBelow(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valuesAbove(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueAtRank(
      _poolID: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueAtRankReverse(
      _poolID: PromiseOrValue<BigNumberish>,
      _rank: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueRankReverse(
      _poolID: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
