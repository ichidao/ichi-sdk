/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StablecoinV2Interface extends utils.Interface {
  functions: {
    "MAX_RESERVE_RATIO()": FunctionFragment;
    "MIN_DELAY()": FunctionFragment;
    "MIN_RESERVE_RATIO()": FunctionFragment;
    "acceptedCollateral(address)": FunctionFragment;
    "chainLink()": FunctionFragment;
    "collateralArray(uint256)": FunctionFragment;
    "collateralDecimals(address)": FunctionFragment;
    "collateralOracle(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "ethUsdcUniswapOracle()": FunctionFragment;
    "gov()": FunctionFragment;
    "lastRefreshReserve()": FunctionFragment;
    "lpGov()": FunctionFragment;
    "minBlockFreeze()": FunctionFragment;
    "minimumRefreshTime()": FunctionFragment;
    "mintFee()": FunctionFragment;
    "name()": FunctionFragment;
    "oneTokenOracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingGov()": FunctionFragment;
    "pendingLPGov()": FunctionFragment;
    "previouslySeenCollateral(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveRatio()": FunctionFragment;
    "reserveStepSize()": FunctionFragment;
    "stimulus()": FunctionFragment;
    "stimulusDecimals()": FunctionFragment;
    "stimulusOracle()": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wethAddress()": FunctionFragment;
    "withdrawFee()": FunctionFragment;
    "addCollateral(address,uint256,address)": FunctionFragment;
    "setReserveStepSize(uint256)": FunctionFragment;
    "setCollateralOracle(address,address)": FunctionFragment;
    "removeCollateral(address)": FunctionFragment;
    "getBurnedStablecoin(address)": FunctionFragment;
    "getCollateralUsd(address)": FunctionFragment;
    "globalCollateralValue()": FunctionFragment;
    "getOneTokenUsd()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "setChainLinkStimulusOracle(address)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "setOneOracle(address)": FunctionFragment;
    "setEthUsdcUniswapOracle(address)": FunctionFragment;
    "setStimulusUniswapOracle(address)": FunctionFragment;
    "getStimulusOracle()": FunctionFragment;
    "setMinimumRefreshTime(uint256)": FunctionFragment;
    "setMinimumReserveRatio(uint256)": FunctionFragment;
    "setMinimumDelay(uint256)": FunctionFragment;
    "setPendingLPGov(address)": FunctionFragment;
    "acceptLPGov()": FunctionFragment;
    "setPendingGov(address)": FunctionFragment;
    "acceptGov()": FunctionFragment;
    "consultOneDeposit(uint256,address)": FunctionFragment;
    "consultOneWithdraw(uint256,address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "editMintFee(uint256)": FunctionFragment;
    "editWithdrawFee(uint256)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdrawFinal(address)": FunctionFragment;
    "safeTransferETH(address,uint256)": FunctionFragment;
    "moveStimulus(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_RESERVE_RATIO"
      | "MIN_DELAY"
      | "MIN_RESERVE_RATIO"
      | "acceptedCollateral"
      | "chainLink"
      | "collateralArray"
      | "collateralDecimals"
      | "collateralOracle"
      | "decimals"
      | "ethUsdcUniswapOracle"
      | "gov"
      | "lastRefreshReserve"
      | "lpGov"
      | "minBlockFreeze"
      | "minimumRefreshTime"
      | "mintFee"
      | "name"
      | "oneTokenOracle"
      | "owner"
      | "pendingGov"
      | "pendingLPGov"
      | "previouslySeenCollateral"
      | "renounceOwnership"
      | "reserveRatio"
      | "reserveStepSize"
      | "stimulus"
      | "stimulusDecimals"
      | "stimulusOracle"
      | "symbol"
      | "transferOwnership"
      | "wethAddress"
      | "withdrawFee"
      | "addCollateral"
      | "setReserveStepSize"
      | "setCollateralOracle"
      | "removeCollateral"
      | "getBurnedStablecoin"
      | "getCollateralUsd"
      | "globalCollateralValue"
      | "getOneTokenUsd"
      | "totalSupply"
      | "balanceOf"
      | "setChainLinkStimulusOracle"
      | "transfer"
      | "allowance"
      | "transferFrom"
      | "approve"
      | "increaseAllowance"
      | "decreaseAllowance"
      | "setOneOracle"
      | "setEthUsdcUniswapOracle"
      | "setStimulusUniswapOracle"
      | "getStimulusOracle"
      | "setMinimumRefreshTime"
      | "setMinimumReserveRatio"
      | "setMinimumDelay"
      | "setPendingLPGov"
      | "acceptLPGov"
      | "setPendingGov"
      | "acceptGov"
      | "consultOneDeposit"
      | "consultOneWithdraw"
      | "mint"
      | "editMintFee"
      | "editWithdrawFee"
      | "withdraw"
      | "withdrawFinal"
      | "safeTransferETH"
      | "moveStimulus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_RESERVE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_DELAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_RESERVE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "chainLink", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralArray",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralDecimals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ethUsdcUniswapOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastRefreshReserve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minBlockFreeze",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumRefreshTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mintFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oneTokenOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLPGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previouslySeenCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveStepSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stimulus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stimulusDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stimulusOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveStepSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnedStablecoin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralUsd",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalCollateralValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOneTokenUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainLinkStimulusOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOneOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEthUsdcUniswapOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStimulusUniswapOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStimulusOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumRefreshTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumReserveRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingLPGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptLPGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "consultOneDeposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "consultOneWithdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "editMintFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editWithdrawFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFinal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferETH",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "moveStimulus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_RESERVE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_DELAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_RESERVE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainLink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethUsdcUniswapOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRefreshReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBlockFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumRefreshTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oneTokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingLPGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previouslySeenCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveStepSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stimulus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stimulusDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stimulusOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveStepSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBurnedStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOneTokenUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainLinkStimulusOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOneOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthUsdcUniswapOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStimulusUniswapOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStimulusOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumRefreshTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingLPGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptLPGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consultOneDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consultOneWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editMintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFinal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveStimulus",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Mint(address,address,address,uint256,uint256,uint256)": EventFragment;
    "MintFee(uint256)": EventFragment;
    "NewGov(address,address)": EventFragment;
    "NewLPGov(address,address)": EventFragment;
    "NewMinimumRefreshTime(uint256)": EventFragment;
    "NewPendingGov(address,address)": EventFragment;
    "NewPendingLPGov(address,address)": EventFragment;
    "NewReserveRate(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,address,address,uint256,uint256,uint256)": EventFragment;
    "WithdrawFee(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLPGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMinimumRefreshTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingLPGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReserveRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFee"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface MintEventObject {
  stimulus: string;
  receiver: string;
  collateral: string;
  collateralAmount: BigNumber;
  stimulusAmount: BigNumber;
  oneAmount: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface MintFeeEventObject {
  fee_: BigNumber;
}
export type MintFeeEvent = TypedEvent<[BigNumber], MintFeeEventObject>;

export type MintFeeEventFilter = TypedEventFilter<MintFeeEvent>;

export interface NewGovEventObject {
  oldGov: string;
  newGov: string;
}
export type NewGovEvent = TypedEvent<[string, string], NewGovEventObject>;

export type NewGovEventFilter = TypedEventFilter<NewGovEvent>;

export interface NewLPGovEventObject {
  oldLPGov: string;
  newLPGov: string;
}
export type NewLPGovEvent = TypedEvent<[string, string], NewLPGovEventObject>;

export type NewLPGovEventFilter = TypedEventFilter<NewLPGovEvent>;

export interface NewMinimumRefreshTimeEventObject {
  minimumRefreshTime: BigNumber;
}
export type NewMinimumRefreshTimeEvent = TypedEvent<
  [BigNumber],
  NewMinimumRefreshTimeEventObject
>;

export type NewMinimumRefreshTimeEventFilter =
  TypedEventFilter<NewMinimumRefreshTimeEvent>;

export interface NewPendingGovEventObject {
  oldPendingGov: string;
  newPendingGov: string;
}
export type NewPendingGovEvent = TypedEvent<
  [string, string],
  NewPendingGovEventObject
>;

export type NewPendingGovEventFilter = TypedEventFilter<NewPendingGovEvent>;

export interface NewPendingLPGovEventObject {
  oldPendingLPGov: string;
  newPendingLPGov: string;
}
export type NewPendingLPGovEvent = TypedEvent<
  [string, string],
  NewPendingLPGovEventObject
>;

export type NewPendingLPGovEventFilter = TypedEventFilter<NewPendingLPGovEvent>;

export interface NewReserveRateEventObject {
  reserveRatio: BigNumber;
}
export type NewReserveRateEvent = TypedEvent<
  [BigNumber],
  NewReserveRateEventObject
>;

export type NewReserveRateEventFilter = TypedEventFilter<NewReserveRateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  stimulus: string;
  receiver: string;
  collateral: string;
  collateralAmount: BigNumber;
  stimulusAmount: BigNumber;
  oneAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawFeeEventObject {
  fee_: BigNumber;
}
export type WithdrawFeeEvent = TypedEvent<[BigNumber], WithdrawFeeEventObject>;

export type WithdrawFeeEventFilter = TypedEventFilter<WithdrawFeeEvent>;

export interface StablecoinV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StablecoinV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_RESERVE_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_RESERVE_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptedCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    chainLink(overrides?: CallOverrides): Promise<[boolean]>;

    collateralArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collateralDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralOracle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    ethUsdcUniswapOracle(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    lastRefreshReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpGov(overrides?: CallOverrides): Promise<[string]>;

    minBlockFreeze(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumRefreshTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    oneTokenOracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingGov(overrides?: CallOverrides): Promise<[string]>;

    pendingLPGov(overrides?: CallOverrides): Promise<[string]>;

    previouslySeenCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveStepSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    stimulus(overrides?: CallOverrides): Promise<[string]>;

    stimulusDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    stimulusOracle(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    addCollateral(
      collateral_: PromiseOrValue<string>,
      collateralDecimal_: PromiseOrValue<BigNumberish>,
      oracleAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReserveStepSize(
      stepSize_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollateralOracle(
      collateral_: PromiseOrValue<string>,
      oracleAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCollateral(
      collateral_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBurnedStablecoin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCollateralUsd(
      collateral_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalCollateralValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOneTokenUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setChainLinkStimulusOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOneOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEthUsdcUniswapOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStimulusUniswapOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStimulusOracle(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinimumRefreshTime(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumReserveRatio(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumDelay(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingLPGov(
      pendingLPGov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptLPGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPendingGov(
      pendingGov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consultOneDeposit(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    consultOneWithdraw(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    mint(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editMintFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editWithdrawFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFinal(
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferETH(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveStimulus(
      location: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_RESERVE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_RESERVE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  acceptedCollateral(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  chainLink(overrides?: CallOverrides): Promise<boolean>;

  collateralArray(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  collateralDecimals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralOracle(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  ethUsdcUniswapOracle(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  lastRefreshReserve(overrides?: CallOverrides): Promise<BigNumber>;

  lpGov(overrides?: CallOverrides): Promise<string>;

  minBlockFreeze(overrides?: CallOverrides): Promise<BigNumber>;

  minimumRefreshTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintFee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  oneTokenOracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingGov(overrides?: CallOverrides): Promise<string>;

  pendingLPGov(overrides?: CallOverrides): Promise<string>;

  previouslySeenCollateral(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

  reserveStepSize(overrides?: CallOverrides): Promise<BigNumber>;

  stimulus(overrides?: CallOverrides): Promise<string>;

  stimulusDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  stimulusOracle(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  addCollateral(
    collateral_: PromiseOrValue<string>,
    collateralDecimal_: PromiseOrValue<BigNumberish>,
    oracleAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReserveStepSize(
    stepSize_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollateralOracle(
    collateral_: PromiseOrValue<string>,
    oracleAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCollateral(
    collateral_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBurnedStablecoin(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralUsd(
    collateral_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalCollateralValue(overrides?: CallOverrides): Promise<BigNumber>;

  getOneTokenUsd(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setChainLinkStimulusOracle(
    oracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transfer(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner_: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOneOracle(
    oracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEthUsdcUniswapOracle(
    oracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStimulusUniswapOracle(
    oracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStimulusOracle(overrides?: CallOverrides): Promise<BigNumber>;

  setMinimumRefreshTime(
    val_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumReserveRatio(
    val_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumDelay(
    val_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingLPGov(
    pendingLPGov_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptLPGov(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPendingGov(
    pendingGov_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptGov(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consultOneDeposit(
    oneAmount: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  consultOneWithdraw(
    oneAmount: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  mint(
    oneAmount: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editMintFee(
    fee_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editWithdrawFee(
    fee_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    oneAmount: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFinal(
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferETH(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveStimulus(
    location: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_RESERVE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_RESERVE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    acceptedCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    chainLink(overrides?: CallOverrides): Promise<boolean>;

    collateralArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    collateralDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralOracle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    ethUsdcUniswapOracle(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    lastRefreshReserve(overrides?: CallOverrides): Promise<BigNumber>;

    lpGov(overrides?: CallOverrides): Promise<string>;

    minBlockFreeze(overrides?: CallOverrides): Promise<BigNumber>;

    minimumRefreshTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    oneTokenOracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingGov(overrides?: CallOverrides): Promise<string>;

    pendingLPGov(overrides?: CallOverrides): Promise<string>;

    previouslySeenCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    reserveStepSize(overrides?: CallOverrides): Promise<BigNumber>;

    stimulus(overrides?: CallOverrides): Promise<string>;

    stimulusDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    stimulusOracle(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      collateral_: PromiseOrValue<string>,
      collateralDecimal_: PromiseOrValue<BigNumberish>,
      oracleAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveStepSize(
      stepSize_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralOracle(
      collateral_: PromiseOrValue<string>,
      oracleAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCollateral(
      collateral_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBurnedStablecoin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralUsd(
      collateral_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalCollateralValue(overrides?: CallOverrides): Promise<BigNumber>;

    getOneTokenUsd(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setChainLinkStimulusOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setOneOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setEthUsdcUniswapOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setStimulusUniswapOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getStimulusOracle(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimumRefreshTime(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMinimumReserveRatio(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumDelay(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingLPGov(
      pendingLPGov_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptLPGov(overrides?: CallOverrides): Promise<void>;

    setPendingGov(
      pendingGov_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptGov(overrides?: CallOverrides): Promise<void>;

    consultOneDeposit(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    consultOneWithdraw(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    mint(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    editMintFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editWithdrawFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFinal(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferETH(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    moveStimulus(
      location: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Mint(address,address,address,uint256,uint256,uint256)"(
      stimulus?: null,
      receiver?: null,
      collateral?: null,
      collateralAmount?: null,
      stimulusAmount?: null,
      oneAmount?: null
    ): MintEventFilter;
    Mint(
      stimulus?: null,
      receiver?: null,
      collateral?: null,
      collateralAmount?: null,
      stimulusAmount?: null,
      oneAmount?: null
    ): MintEventFilter;

    "MintFee(uint256)"(fee_?: null): MintFeeEventFilter;
    MintFee(fee_?: null): MintFeeEventFilter;

    "NewGov(address,address)"(oldGov?: null, newGov?: null): NewGovEventFilter;
    NewGov(oldGov?: null, newGov?: null): NewGovEventFilter;

    "NewLPGov(address,address)"(
      oldLPGov?: null,
      newLPGov?: null
    ): NewLPGovEventFilter;
    NewLPGov(oldLPGov?: null, newLPGov?: null): NewLPGovEventFilter;

    "NewMinimumRefreshTime(uint256)"(
      minimumRefreshTime?: null
    ): NewMinimumRefreshTimeEventFilter;
    NewMinimumRefreshTime(
      minimumRefreshTime?: null
    ): NewMinimumRefreshTimeEventFilter;

    "NewPendingGov(address,address)"(
      oldPendingGov?: null,
      newPendingGov?: null
    ): NewPendingGovEventFilter;
    NewPendingGov(
      oldPendingGov?: null,
      newPendingGov?: null
    ): NewPendingGovEventFilter;

    "NewPendingLPGov(address,address)"(
      oldPendingLPGov?: null,
      newPendingLPGov?: null
    ): NewPendingLPGovEventFilter;
    NewPendingLPGov(
      oldPendingLPGov?: null,
      newPendingLPGov?: null
    ): NewPendingLPGovEventFilter;

    "NewReserveRate(uint256)"(reserveRatio?: null): NewReserveRateEventFilter;
    NewReserveRate(reserveRatio?: null): NewReserveRateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,address,address,uint256,uint256,uint256)"(
      stimulus?: null,
      receiver?: null,
      collateral?: null,
      collateralAmount?: null,
      stimulusAmount?: null,
      oneAmount?: null
    ): WithdrawEventFilter;
    Withdraw(
      stimulus?: null,
      receiver?: null,
      collateral?: null,
      collateralAmount?: null,
      stimulusAmount?: null,
      oneAmount?: null
    ): WithdrawEventFilter;

    "WithdrawFee(uint256)"(fee_?: null): WithdrawFeeEventFilter;
    WithdrawFee(fee_?: null): WithdrawFeeEventFilter;
  };

  estimateGas: {
    MAX_RESERVE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_RESERVE_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    acceptedCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainLink(overrides?: CallOverrides): Promise<BigNumber>;

    collateralArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralOracle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    ethUsdcUniswapOracle(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    lastRefreshReserve(overrides?: CallOverrides): Promise<BigNumber>;

    lpGov(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockFreeze(overrides?: CallOverrides): Promise<BigNumber>;

    minimumRefreshTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    oneTokenOracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGov(overrides?: CallOverrides): Promise<BigNumber>;

    pendingLPGov(overrides?: CallOverrides): Promise<BigNumber>;

    previouslySeenCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    reserveStepSize(overrides?: CallOverrides): Promise<BigNumber>;

    stimulus(overrides?: CallOverrides): Promise<BigNumber>;

    stimulusDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    stimulusOracle(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      collateral_: PromiseOrValue<string>,
      collateralDecimal_: PromiseOrValue<BigNumberish>,
      oracleAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReserveStepSize(
      stepSize_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollateralOracle(
      collateral_: PromiseOrValue<string>,
      oracleAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCollateral(
      collateral_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBurnedStablecoin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralUsd(
      collateral_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalCollateralValue(overrides?: CallOverrides): Promise<BigNumber>;

    getOneTokenUsd(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setChainLinkStimulusOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOneOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEthUsdcUniswapOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStimulusUniswapOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStimulusOracle(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimumRefreshTime(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumReserveRatio(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumDelay(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingLPGov(
      pendingLPGov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptLPGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPendingGov(
      pendingGov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consultOneDeposit(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consultOneWithdraw(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editMintFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editWithdrawFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFinal(
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferETH(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveStimulus(
      location: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_RESERVE_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_RESERVE_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptedCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainLink(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralArray(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralOracle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethUsdcUniswapOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRefreshReserve(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBlockFreeze(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumRefreshTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oneTokenOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingLPGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previouslySeenCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveStepSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stimulus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stimulusDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stimulusOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollateral(
      collateral_: PromiseOrValue<string>,
      collateralDecimal_: PromiseOrValue<BigNumberish>,
      oracleAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReserveStepSize(
      stepSize_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralOracle(
      collateral_: PromiseOrValue<string>,
      oracleAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      collateral_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBurnedStablecoin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralUsd(
      collateral_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalCollateralValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOneTokenUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setChainLinkStimulusOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOneOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEthUsdcUniswapOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStimulusUniswapOracle(
      oracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStimulusOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinimumRefreshTime(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumReserveRatio(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumDelay(
      val_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingLPGov(
      pendingLPGov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptLPGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPendingGov(
      pendingGov_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptGov(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consultOneDeposit(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consultOneWithdraw(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editMintFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editWithdrawFee(
      fee_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      oneAmount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFinal(
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferETH(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveStimulus(
      location: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
