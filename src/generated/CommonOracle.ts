/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CommonOracleInterface extends utils.Interface {
  functions: {
    "MODULE_TYPE()": FunctionFragment;
    "amountRequired(address,uint256)": FunctionFragment;
    "getThePrice()": FunctionFragment;
    "indexToken()": FunctionFragment;
    "init(address)": FunctionFragment;
    "moduleDescription()": FunctionFragment;
    "moduleType()": FunctionFragment;
    "normalizedToTokens(address,uint256)": FunctionFragment;
    "oneTokenFactory()": FunctionFragment;
    "owner()": FunctionFragment;
    "read(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokensToNormalized(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "update(address)": FunctionFragment;
    "updateDescription(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MODULE_TYPE"
      | "amountRequired"
      | "getThePrice"
      | "indexToken"
      | "init"
      | "moduleDescription"
      | "moduleType"
      | "normalizedToTokens"
      | "oneTokenFactory"
      | "owner"
      | "read"
      | "renounceOwnership"
      | "tokensToNormalized"
      | "transferOwnership"
      | "update"
      | "updateDescription"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MODULE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountRequired",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getThePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleDescription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moduleType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "normalizedToTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "oneTokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "read",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToNormalized",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDescription",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MODULE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moduleType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "normalizedToTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToNormalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDescription",
    data: BytesLike
  ): Result;

  events: {
    "DescriptionUpdated(address,string)": EventFragment;
    "ModuleDeployed(address,uint8,string)": EventFragment;
    "OracleDeployed(address,string,address)": EventFragment;
    "OracleInitialized(address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DescriptionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface DescriptionUpdatedEventObject {
  sender: string;
  description: string;
}
export type DescriptionUpdatedEvent = TypedEvent<
  [string, string],
  DescriptionUpdatedEventObject
>;

export type DescriptionUpdatedEventFilter =
  TypedEventFilter<DescriptionUpdatedEvent>;

export interface ModuleDeployedEventObject {
  sender: string;
  moduleType: number;
  description: string;
}
export type ModuleDeployedEvent = TypedEvent<
  [string, number, string],
  ModuleDeployedEventObject
>;

export type ModuleDeployedEventFilter = TypedEventFilter<ModuleDeployedEvent>;

export interface OracleDeployedEventObject {
  sender: string;
  description: string;
  indexToken: string;
}
export type OracleDeployedEvent = TypedEvent<
  [string, string, string],
  OracleDeployedEventObject
>;

export type OracleDeployedEventFilter = TypedEventFilter<OracleDeployedEvent>;

export interface OracleInitializedEventObject {
  sender: string;
  baseToken: string;
  indexToken: string;
}
export type OracleInitializedEvent = TypedEvent<
  [string, string, string],
  OracleInitializedEventObject
>;

export type OracleInitializedEventFilter =
  TypedEventFilter<OracleInitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CommonOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommonOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<[string]>;

    amountRequired(
      token: PromiseOrValue<string>,
      amountUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountTokens: BigNumber;
        volatility: BigNumber;
      }
    >;

    getThePrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    indexToken(overrides?: CallOverrides): Promise<[string]>;

    init(
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moduleDescription(overrides?: CallOverrides): Promise<[string]>;

    moduleType(overrides?: CallOverrides): Promise<[number]>;

    normalizedToTokens(
      token: PromiseOrValue<string>,
      amountNormal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountTokens: BigNumber }>;

    oneTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    read(
      token: PromiseOrValue<string>,
      amountTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountUsd: BigNumber; volatility: BigNumber }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensToNormalized(
      token: PromiseOrValue<string>,
      amountTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountNormal: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDescription(
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MODULE_TYPE(overrides?: CallOverrides): Promise<string>;

  amountRequired(
    token: PromiseOrValue<string>,
    amountUsd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountTokens: BigNumber; volatility: BigNumber }
  >;

  getThePrice(overrides?: CallOverrides): Promise<BigNumber>;

  indexToken(overrides?: CallOverrides): Promise<string>;

  init(
    baseToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moduleDescription(overrides?: CallOverrides): Promise<string>;

  moduleType(overrides?: CallOverrides): Promise<number>;

  normalizedToTokens(
    token: PromiseOrValue<string>,
    amountNormal: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oneTokenFactory(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  read(
    token: PromiseOrValue<string>,
    amountTokens: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountUsd: BigNumber; volatility: BigNumber }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensToNormalized(
    token: PromiseOrValue<string>,
    amountTokens: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDescription(
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<string>;

    amountRequired(
      token: PromiseOrValue<string>,
      amountUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountTokens: BigNumber;
        volatility: BigNumber;
      }
    >;

    getThePrice(overrides?: CallOverrides): Promise<BigNumber>;

    indexToken(overrides?: CallOverrides): Promise<string>;

    init(
      baseToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    moduleDescription(overrides?: CallOverrides): Promise<string>;

    moduleType(overrides?: CallOverrides): Promise<number>;

    normalizedToTokens(
      token: PromiseOrValue<string>,
      amountNormal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneTokenFactory(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    read(
      token: PromiseOrValue<string>,
      amountTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountUsd: BigNumber; volatility: BigNumber }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokensToNormalized(
      token: PromiseOrValue<string>,
      amountTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDescription(
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DescriptionUpdated(address,string)"(
      sender?: null,
      description?: null
    ): DescriptionUpdatedEventFilter;
    DescriptionUpdated(
      sender?: null,
      description?: null
    ): DescriptionUpdatedEventFilter;

    "ModuleDeployed(address,uint8,string)"(
      sender?: null,
      moduleType?: null,
      description?: null
    ): ModuleDeployedEventFilter;
    ModuleDeployed(
      sender?: null,
      moduleType?: null,
      description?: null
    ): ModuleDeployedEventFilter;

    "OracleDeployed(address,string,address)"(
      sender?: null,
      description?: null,
      indexToken?: null
    ): OracleDeployedEventFilter;
    OracleDeployed(
      sender?: null,
      description?: null,
      indexToken?: null
    ): OracleDeployedEventFilter;

    "OracleInitialized(address,address,address)"(
      sender?: null,
      baseToken?: null,
      indexToken?: null
    ): OracleInitializedEventFilter;
    OracleInitialized(
      sender?: null,
      baseToken?: null,
      indexToken?: null
    ): OracleInitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    amountRequired(
      token: PromiseOrValue<string>,
      amountUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThePrice(overrides?: CallOverrides): Promise<BigNumber>;

    indexToken(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moduleDescription(overrides?: CallOverrides): Promise<BigNumber>;

    moduleType(overrides?: CallOverrides): Promise<BigNumber>;

    normalizedToTokens(
      token: PromiseOrValue<string>,
      amountNormal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oneTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    read(
      token: PromiseOrValue<string>,
      amountTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensToNormalized(
      token: PromiseOrValue<string>,
      amountTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDescription(
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MODULE_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountRequired(
      token: PromiseOrValue<string>,
      amountUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      baseToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moduleDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    normalizedToTokens(
      token: PromiseOrValue<string>,
      amountNormal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneTokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    read(
      token: PromiseOrValue<string>,
      amountTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensToNormalized(
      token: PromiseOrValue<string>,
      amountTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDescription(
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
