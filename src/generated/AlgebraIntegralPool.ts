/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AlgebraIntegralPoolInterface extends utils.Interface {
  functions: {
    "burn(int24,int24,uint128,bytes)": FunctionFragment;
    "claim(address,address,uint256)": FunctionFragment;
    "collect(address,int24,int24,uint128,uint128)": FunctionFragment;
    "communityFeeLastTimestamp()": FunctionFragment;
    "communityVault()": FunctionFragment;
    "configure(address,uint8)": FunctionFragment;
    "factory()": FunctionFragment;
    "fee()": FunctionFragment;
    "flash(address,uint256,uint256,bytes)": FunctionFragment;
    "getCommunityFeePending()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "globalState()": FunctionFragment;
    "initialize(uint160)": FunctionFragment;
    "isUnlocked()": FunctionFragment;
    "liquidity()": FunctionFragment;
    "maxLiquidityPerTick()": FunctionFragment;
    "mint(address,address,int24,int24,uint128,bytes)": FunctionFragment;
    "nextTickGlobal()": FunctionFragment;
    "plugin()": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "prevTickGlobal()": FunctionFragment;
    "safelyGetStateOfAMM()": FunctionFragment;
    "setCommunityFee(uint16)": FunctionFragment;
    "setCommunityVault(address)": FunctionFragment;
    "setFee(uint16)": FunctionFragment;
    "setPlugin(address)": FunctionFragment;
    "setPluginConfig(uint8)": FunctionFragment;
    "setTickSpacing(int24)": FunctionFragment;
    "swap(address,bool,int256,uint160,bytes)": FunctionFragment;
    "swapWithPaymentInAdvance(address,address,bool,int256,uint160,bytes)": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "tickTable(int16)": FunctionFragment;
    "tickTreeRoot()": FunctionFragment;
    "tickTreeSecondLayer(int16)": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "totalFeeGrowth0Token()": FunctionFragment;
    "totalFeeGrowth1Token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burn"
      | "claim"
      | "collect"
      | "communityFeeLastTimestamp"
      | "communityVault"
      | "configure"
      | "factory"
      | "fee"
      | "flash"
      | "getCommunityFeePending"
      | "getReserves"
      | "globalState"
      | "initialize"
      | "isUnlocked"
      | "liquidity"
      | "maxLiquidityPerTick"
      | "mint"
      | "nextTickGlobal"
      | "plugin"
      | "positions"
      | "prevTickGlobal"
      | "safelyGetStateOfAMM"
      | "setCommunityFee"
      | "setCommunityVault"
      | "setFee"
      | "setPlugin"
      | "setPluginConfig"
      | "setTickSpacing"
      | "swap"
      | "swapWithPaymentInAdvance"
      | "tickSpacing"
      | "tickTable"
      | "tickTreeRoot"
      | "tickTreeSecondLayer"
      | "ticks"
      | "token0"
      | "token1"
      | "totalFeeGrowth0Token"
      | "totalFeeGrowth1Token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "communityFeeLastTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunityFeePending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnlocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxLiquidityPerTick",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTickGlobal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "plugin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "prevTickGlobal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safelyGetStateOfAMM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCommunityFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommunityVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlugin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPluginConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTickSpacing",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapWithPaymentInAdvance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickTable",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tickTreeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickTreeSecondLayer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth0Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth1Token",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "communityFeeLastTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommunityFeePending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUnlocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidityPerTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTickGlobal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "plugin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevTickGlobal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safelyGetStateOfAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommunityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommunityVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPlugin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPluginConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapWithPaymentInAdvance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickTable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickTreeSecondLayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth0Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth1Token",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,int24,int24,uint128,uint256,uint256)": EventFragment;
    "Collect(address,address,int24,int24,uint128,uint128)": EventFragment;
    "CommunityFee(uint16)": EventFragment;
    "CommunityVault(address)": EventFragment;
    "Fee(uint16)": EventFragment;
    "Flash(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Initialize(uint160,int24)": EventFragment;
    "Mint(address,address,int24,int24,uint128,uint256,uint256)": EventFragment;
    "Plugin(address)": EventFragment;
    "PluginConfig(uint8)": EventFragment;
    "Swap(address,address,int256,int256,uint160,uint128,int24)": EventFragment;
    "TickSpacing(int24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Plugin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TickSpacing"): EventFragment;
}

export interface BurnEventObject {
  owner: string;
  bottomTick: number;
  topTick: number;
  liquidityAmount: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type BurnEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber, BigNumber],
  BurnEventObject
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface CollectEventObject {
  owner: string;
  recipient: string;
  bottomTick: number;
  topTick: number;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type CollectEvent = TypedEvent<
  [string, string, number, number, BigNumber, BigNumber],
  CollectEventObject
>;

export type CollectEventFilter = TypedEventFilter<CollectEvent>;

export interface CommunityFeeEventObject {
  communityFeeNew: number;
}
export type CommunityFeeEvent = TypedEvent<[number], CommunityFeeEventObject>;

export type CommunityFeeEventFilter = TypedEventFilter<CommunityFeeEvent>;

export interface CommunityVaultEventObject {
  newCommunityVault: string;
}
export type CommunityVaultEvent = TypedEvent<
  [string],
  CommunityVaultEventObject
>;

export type CommunityVaultEventFilter = TypedEventFilter<CommunityVaultEvent>;

export interface FeeEventObject {
  fee: number;
}
export type FeeEvent = TypedEvent<[number], FeeEventObject>;

export type FeeEventFilter = TypedEventFilter<FeeEvent>;

export interface FlashEventObject {
  sender: string;
  recipient: string;
  amount0: BigNumber;
  amount1: BigNumber;
  paid0: BigNumber;
  paid1: BigNumber;
}
export type FlashEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  FlashEventObject
>;

export type FlashEventFilter = TypedEventFilter<FlashEvent>;

export interface InitializeEventObject {
  price: BigNumber;
  tick: number;
}
export type InitializeEvent = TypedEvent<
  [BigNumber, number],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface MintEventObject {
  sender: string;
  owner: string;
  bottomTick: number;
  topTick: number;
  liquidityAmount: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, number, number, BigNumber, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface PluginEventObject {
  newPluginAddress: string;
}
export type PluginEvent = TypedEvent<[string], PluginEventObject>;

export type PluginEventFilter = TypedEventFilter<PluginEvent>;

export interface PluginConfigEventObject {
  newPluginConfig: number;
}
export type PluginConfigEvent = TypedEvent<[number], PluginConfigEventObject>;

export type PluginConfigEventFilter = TypedEventFilter<PluginConfigEvent>;

export interface SwapEventObject {
  sender: string;
  recipient: string;
  amount0: BigNumber;
  amount1: BigNumber;
  price: BigNumber;
  liquidity: BigNumber;
  tick: number;
}
export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface TickSpacingEventObject {
  newTickSpacing: number;
}
export type TickSpacingEvent = TypedEvent<[number], TickSpacingEventObject>;

export type TickSpacingEventFilter = TypedEventFilter<TickSpacingEvent>;

export interface AlgebraIntegralPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AlgebraIntegralPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burn(
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      erc20Rebasing_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collect(
      recipient: PromiseOrValue<string>,
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    communityFeeLastTimestamp(overrides?: CallOverrides): Promise<[number]>;

    communityVault(overrides?: CallOverrides): Promise<[string]>;

    configure(
      erc20Rebasing_: PromiseOrValue<string>,
      mode_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[number] & { currentFee: number }>;

    flash(
      recipient: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCommunityFeePending(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    globalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        lastFee: number;
        pluginConfig: number;
        communityFee: number;
        unlocked: boolean;
      }
    >;

    initialize(
      initialPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isUnlocked(
      overrides?: CallOverrides
    ): Promise<[boolean] & { unlocked: boolean }>;

    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLiquidityPerTick(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      leftoversRecipient: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      liquidityDesired: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextTickGlobal(overrides?: CallOverrides): Promise<[number]>;

    plugin(overrides?: CallOverrides): Promise<[string]>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    prevTickGlobal(overrides?: CallOverrides): Promise<[number]>;

    safelyGetStateOfAMM(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, BigNumber, number, number] & {
        sqrtPrice: BigNumber;
        tick: number;
        lastFee: number;
        pluginConfig: number;
        activeLiquidity: BigNumber;
        nextTick: number;
        previousTick: number;
      }
    >;

    setCommunityFee(
      newCommunityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommunityVault(
      newCommunityVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlugin(
      newPluginAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPluginConfig(
      newConfig: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTickSpacing(
      newTickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      recipient: PromiseOrValue<string>,
      zeroToOne: PromiseOrValue<boolean>,
      amountRequired: PromiseOrValue<BigNumberish>,
      limitSqrtPrice: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapWithPaymentInAdvance(
      leftoversRecipient: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      zeroToOne: PromiseOrValue<boolean>,
      amountToSell: PromiseOrValue<BigNumberish>,
      limitSqrtPrice: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    tickTable(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tickTreeRoot(overrides?: CallOverrides): Promise<[number]>;

    tickTreeSecondLayer(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, BigNumber, BigNumber] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        prevTick: number;
        nextTick: number;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  burn(
    bottomTick: PromiseOrValue<BigNumberish>,
    topTick: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    erc20Rebasing_: PromiseOrValue<string>,
    recipient_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collect(
    recipient: PromiseOrValue<string>,
    bottomTick: PromiseOrValue<BigNumberish>,
    topTick: PromiseOrValue<BigNumberish>,
    amount0Requested: PromiseOrValue<BigNumberish>,
    amount1Requested: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  communityFeeLastTimestamp(overrides?: CallOverrides): Promise<number>;

  communityVault(overrides?: CallOverrides): Promise<string>;

  configure(
    erc20Rebasing_: PromiseOrValue<string>,
    mode_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<number>;

  flash(
    recipient: PromiseOrValue<string>,
    amount0: PromiseOrValue<BigNumberish>,
    amount1: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCommunityFeePending(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  globalState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, boolean] & {
      price: BigNumber;
      tick: number;
      lastFee: number;
      pluginConfig: number;
      communityFee: number;
      unlocked: boolean;
    }
  >;

  initialize(
    initialPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isUnlocked(overrides?: CallOverrides): Promise<boolean>;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    leftoversRecipient: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    bottomTick: PromiseOrValue<BigNumberish>,
    topTick: PromiseOrValue<BigNumberish>,
    liquidityDesired: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextTickGlobal(overrides?: CallOverrides): Promise<number>;

  plugin(overrides?: CallOverrides): Promise<string>;

  positions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      innerFeeGrowth0Token: BigNumber;
      innerFeeGrowth1Token: BigNumber;
      fees0: BigNumber;
      fees1: BigNumber;
    }
  >;

  prevTickGlobal(overrides?: CallOverrides): Promise<number>;

  safelyGetStateOfAMM(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, BigNumber, number, number] & {
      sqrtPrice: BigNumber;
      tick: number;
      lastFee: number;
      pluginConfig: number;
      activeLiquidity: BigNumber;
      nextTick: number;
      previousTick: number;
    }
  >;

  setCommunityFee(
    newCommunityFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommunityVault(
    newCommunityVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlugin(
    newPluginAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPluginConfig(
    newConfig: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTickSpacing(
    newTickSpacing: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    recipient: PromiseOrValue<string>,
    zeroToOne: PromiseOrValue<boolean>,
    amountRequired: PromiseOrValue<BigNumberish>,
    limitSqrtPrice: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapWithPaymentInAdvance(
    leftoversRecipient: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    zeroToOne: PromiseOrValue<boolean>,
    amountToSell: PromiseOrValue<BigNumberish>,
    limitSqrtPrice: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  tickTable(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tickTreeRoot(overrides?: CallOverrides): Promise<number>;

  tickTreeSecondLayer(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ticks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, number, BigNumber, BigNumber] & {
      liquidityTotal: BigNumber;
      liquidityDelta: BigNumber;
      prevTick: number;
      nextTick: number;
      outerFeeGrowth0Token: BigNumber;
      outerFeeGrowth1Token: BigNumber;
    }
  >;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

  totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    burn(
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    claim(
      erc20Rebasing_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      recipient: PromiseOrValue<string>,
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    communityFeeLastTimestamp(overrides?: CallOverrides): Promise<number>;

    communityVault(overrides?: CallOverrides): Promise<string>;

    configure(
      erc20Rebasing_: PromiseOrValue<string>,
      mode_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<number>;

    flash(
      recipient: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCommunityFeePending(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    globalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        lastFee: number;
        pluginConfig: number;
        communityFee: number;
        unlocked: boolean;
      }
    >;

    initialize(
      initialPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isUnlocked(overrides?: CallOverrides): Promise<boolean>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      leftoversRecipient: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      liquidityDesired: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        liquidityActual: BigNumber;
      }
    >;

    nextTickGlobal(overrides?: CallOverrides): Promise<number>;

    plugin(overrides?: CallOverrides): Promise<string>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    prevTickGlobal(overrides?: CallOverrides): Promise<number>;

    safelyGetStateOfAMM(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, BigNumber, number, number] & {
        sqrtPrice: BigNumber;
        tick: number;
        lastFee: number;
        pluginConfig: number;
        activeLiquidity: BigNumber;
        nextTick: number;
        previousTick: number;
      }
    >;

    setCommunityFee(
      newCommunityFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommunityVault(
      newCommunityVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlugin(
      newPluginAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPluginConfig(
      newConfig: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTickSpacing(
      newTickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      recipient: PromiseOrValue<string>,
      zeroToOne: PromiseOrValue<boolean>,
      amountRequired: PromiseOrValue<BigNumberish>,
      limitSqrtPrice: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    swapWithPaymentInAdvance(
      leftoversRecipient: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      zeroToOne: PromiseOrValue<boolean>,
      amountToSell: PromiseOrValue<BigNumberish>,
      limitSqrtPrice: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    tickTable(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickTreeRoot(overrides?: CallOverrides): Promise<number>;

    tickTreeSecondLayer(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, number, BigNumber, BigNumber] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        prevTick: number;
        nextTick: number;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Burn(address,int24,int24,uint128,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      bottomTick?: PromiseOrValue<BigNumberish> | null,
      topTick?: PromiseOrValue<BigNumberish> | null,
      liquidityAmount?: null,
      amount0?: null,
      amount1?: null
    ): BurnEventFilter;
    Burn(
      owner?: PromiseOrValue<string> | null,
      bottomTick?: PromiseOrValue<BigNumberish> | null,
      topTick?: PromiseOrValue<BigNumberish> | null,
      liquidityAmount?: null,
      amount0?: null,
      amount1?: null
    ): BurnEventFilter;

    "Collect(address,address,int24,int24,uint128,uint128)"(
      owner?: PromiseOrValue<string> | null,
      recipient?: null,
      bottomTick?: PromiseOrValue<BigNumberish> | null,
      topTick?: PromiseOrValue<BigNumberish> | null,
      amount0?: null,
      amount1?: null
    ): CollectEventFilter;
    Collect(
      owner?: PromiseOrValue<string> | null,
      recipient?: null,
      bottomTick?: PromiseOrValue<BigNumberish> | null,
      topTick?: PromiseOrValue<BigNumberish> | null,
      amount0?: null,
      amount1?: null
    ): CollectEventFilter;

    "CommunityFee(uint16)"(communityFeeNew?: null): CommunityFeeEventFilter;
    CommunityFee(communityFeeNew?: null): CommunityFeeEventFilter;

    "CommunityVault(address)"(
      newCommunityVault?: null
    ): CommunityVaultEventFilter;
    CommunityVault(newCommunityVault?: null): CommunityVaultEventFilter;

    "Fee(uint16)"(fee?: null): FeeEventFilter;
    Fee(fee?: null): FeeEventFilter;

    "Flash(address,address,uint256,uint256,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null,
      paid0?: null,
      paid1?: null
    ): FlashEventFilter;
    Flash(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null,
      paid0?: null,
      paid1?: null
    ): FlashEventFilter;

    "Initialize(uint160,int24)"(
      price?: null,
      tick?: null
    ): InitializeEventFilter;
    Initialize(price?: null, tick?: null): InitializeEventFilter;

    "Mint(address,address,int24,int24,uint128,uint256,uint256)"(
      sender?: null,
      owner?: PromiseOrValue<string> | null,
      bottomTick?: PromiseOrValue<BigNumberish> | null,
      topTick?: PromiseOrValue<BigNumberish> | null,
      liquidityAmount?: null,
      amount0?: null,
      amount1?: null
    ): MintEventFilter;
    Mint(
      sender?: null,
      owner?: PromiseOrValue<string> | null,
      bottomTick?: PromiseOrValue<BigNumberish> | null,
      topTick?: PromiseOrValue<BigNumberish> | null,
      liquidityAmount?: null,
      amount0?: null,
      amount1?: null
    ): MintEventFilter;

    "Plugin(address)"(newPluginAddress?: null): PluginEventFilter;
    Plugin(newPluginAddress?: null): PluginEventFilter;

    "PluginConfig(uint8)"(newPluginConfig?: null): PluginConfigEventFilter;
    PluginConfig(newPluginConfig?: null): PluginConfigEventFilter;

    "Swap(address,address,int256,int256,uint160,uint128,int24)"(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null,
      price?: null,
      liquidity?: null,
      tick?: null
    ): SwapEventFilter;
    Swap(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount0?: null,
      amount1?: null,
      price?: null,
      liquidity?: null,
      tick?: null
    ): SwapEventFilter;

    "TickSpacing(int24)"(newTickSpacing?: null): TickSpacingEventFilter;
    TickSpacing(newTickSpacing?: null): TickSpacingEventFilter;
  };

  estimateGas: {
    burn(
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      erc20Rebasing_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collect(
      recipient: PromiseOrValue<string>,
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    communityFeeLastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    communityVault(overrides?: CallOverrides): Promise<BigNumber>;

    configure(
      erc20Rebasing_: PromiseOrValue<string>,
      mode_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    flash(
      recipient: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCommunityFeePending(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    globalState(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initialPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      leftoversRecipient: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      liquidityDesired: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextTickGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    plugin(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevTickGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    safelyGetStateOfAMM(overrides?: CallOverrides): Promise<BigNumber>;

    setCommunityFee(
      newCommunityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommunityVault(
      newCommunityVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlugin(
      newPluginAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPluginConfig(
      newConfig: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTickSpacing(
      newTickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      recipient: PromiseOrValue<string>,
      zeroToOne: PromiseOrValue<boolean>,
      amountRequired: PromiseOrValue<BigNumberish>,
      limitSqrtPrice: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapWithPaymentInAdvance(
      leftoversRecipient: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      zeroToOne: PromiseOrValue<boolean>,
      amountToSell: PromiseOrValue<BigNumberish>,
      limitSqrtPrice: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    tickTable(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

    tickTreeSecondLayer(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      erc20Rebasing_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      recipient: PromiseOrValue<string>,
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    communityFeeLastTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configure(
      erc20Rebasing_: PromiseOrValue<string>,
      mode_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flash(
      recipient: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCommunityFeePending(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      initialPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isUnlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLiquidityPerTick(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      leftoversRecipient: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      bottomTick: PromiseOrValue<BigNumberish>,
      topTick: PromiseOrValue<BigNumberish>,
      liquidityDesired: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextTickGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plugin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevTickGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safelyGetStateOfAMM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCommunityFee(
      newCommunityFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommunityVault(
      newCommunityVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlugin(
      newPluginAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPluginConfig(
      newConfig: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTickSpacing(
      newTickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      recipient: PromiseOrValue<string>,
      zeroToOne: PromiseOrValue<boolean>,
      amountRequired: PromiseOrValue<BigNumberish>,
      limitSqrtPrice: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapWithPaymentInAdvance(
      leftoversRecipient: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      zeroToOne: PromiseOrValue<boolean>,
      amountToSell: PromiseOrValue<BigNumberish>,
      limitSqrtPrice: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickTable(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickTreeRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickTreeSecondLayer(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFeeGrowth0Token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFeeGrowth1Token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
