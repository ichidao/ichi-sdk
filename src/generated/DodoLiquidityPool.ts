/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace PMMPricing {
  export type PMMStateStruct = {
    i: PromiseOrValue<BigNumberish>;
    K: PromiseOrValue<BigNumberish>;
    B: PromiseOrValue<BigNumberish>;
    Q: PromiseOrValue<BigNumberish>;
    B0: PromiseOrValue<BigNumberish>;
    Q0: PromiseOrValue<BigNumberish>;
    R: PromiseOrValue<BigNumberish>;
  };

  export type PMMStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    i: BigNumber;
    K: BigNumber;
    B: BigNumber;
    Q: BigNumber;
    B0: BigNumber;
    Q0: BigNumber;
    R: number;
  };
}

export interface DodoLiquidityPoolInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "_BASE_PRICE_CUMULATIVE_LAST_()": FunctionFragment;
    "_BASE_RESERVE_()": FunctionFragment;
    "_BASE_TARGET_()": FunctionFragment;
    "_BASE_TOKEN_()": FunctionFragment;
    "_BLOCK_TIMESTAMP_LAST_()": FunctionFragment;
    "_IS_OPEN_TWAP_()": FunctionFragment;
    "_I_()": FunctionFragment;
    "_K_()": FunctionFragment;
    "_LP_FEE_RATE_()": FunctionFragment;
    "_MAINTAINER_()": FunctionFragment;
    "_MT_FEE_RATE_MODEL_()": FunctionFragment;
    "_QUOTE_RESERVE_()": FunctionFragment;
    "_QUOTE_TARGET_()": FunctionFragment;
    "_QUOTE_TOKEN_()": FunctionFragment;
    "_RState_()": FunctionFragment;
    "addressToShortString(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyShares(address)": FunctionFragment;
    "correctRState()": FunctionFragment;
    "decimals()": FunctionFragment;
    "flashLoan(uint256,uint256,address,bytes)": FunctionFragment;
    "getBaseInput()": FunctionFragment;
    "getMidPrice()": FunctionFragment;
    "getPMMState()": FunctionFragment;
    "getPMMStateForCall()": FunctionFragment;
    "getQuoteInput()": FunctionFragment;
    "getUserFeeRate(address)": FunctionFragment;
    "getVaultReserve()": FunctionFragment;
    "init(address,address,address,uint256,address,uint256,uint256,bool)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "querySellBase(address,uint256)": FunctionFragment;
    "querySellQuote(address,uint256)": FunctionFragment;
    "sellBase(address)": FunctionFragment;
    "sellQuote(address)": FunctionFragment;
    "sellShares(uint256,address,uint256,uint256,bytes,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "sync()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "PERMIT_TYPEHASH"
      | "_BASE_PRICE_CUMULATIVE_LAST_"
      | "_BASE_RESERVE_"
      | "_BASE_TARGET_"
      | "_BASE_TOKEN_"
      | "_BLOCK_TIMESTAMP_LAST_"
      | "_IS_OPEN_TWAP_"
      | "_I_"
      | "_K_"
      | "_LP_FEE_RATE_"
      | "_MAINTAINER_"
      | "_MT_FEE_RATE_MODEL_"
      | "_QUOTE_RESERVE_"
      | "_QUOTE_TARGET_"
      | "_QUOTE_TOKEN_"
      | "_RState_"
      | "addressToShortString"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "buyShares"
      | "correctRState"
      | "decimals"
      | "flashLoan"
      | "getBaseInput"
      | "getMidPrice"
      | "getPMMState"
      | "getPMMStateForCall"
      | "getQuoteInput"
      | "getUserFeeRate"
      | "getVaultReserve"
      | "init"
      | "name"
      | "nonces"
      | "permit"
      | "querySellBase"
      | "querySellQuote"
      | "sellBase"
      | "sellQuote"
      | "sellShares"
      | "symbol"
      | "sync"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_PRICE_CUMULATIVE_LAST_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_RESERVE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_TARGET_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_TOKEN_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BLOCK_TIMESTAMP_LAST_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_IS_OPEN_TWAP_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_I_", values?: undefined): string;
  encodeFunctionData(functionFragment: "_K_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_LP_FEE_RATE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_MAINTAINER_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_MT_FEE_RATE_MODEL_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_QUOTE_RESERVE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_QUOTE_TARGET_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_QUOTE_TOKEN_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_RState_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressToShortString",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyShares",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "correctRState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseInput",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMidPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPMMState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPMMStateForCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteInput",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFeeRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "querySellBase",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "querySellQuote",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellBase",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellQuote",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellShares",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_PRICE_CUMULATIVE_LAST_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_RESERVE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_TARGET_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_TOKEN_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BLOCK_TIMESTAMP_LAST_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_IS_OPEN_TWAP_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_I_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_K_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_LP_FEE_RATE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_MAINTAINER_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_MT_FEE_RATE_MODEL_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_QUOTE_RESERVE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_QUOTE_TARGET_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_QUOTE_TOKEN_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_RState_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressToShortString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "correctRState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMidPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPMMState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPMMStateForCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "querySellBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "querySellQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellQuote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(address,uint256)": EventFragment;
    "BuyShares(address,uint256,uint256)": EventFragment;
    "DODOFlashLoan(address,address,uint256,uint256)": EventFragment;
    "DODOSwap(address,address,uint256,uint256,address,address)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "RChange(uint8)": EventFragment;
    "SellShares(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DODOFlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DODOSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  user: string;
  value: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface BuySharesEventObject {
  to: string;
  increaseShares: BigNumber;
  totalShares: BigNumber;
}
export type BuySharesEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuySharesEventObject
>;

export type BuySharesEventFilter = TypedEventFilter<BuySharesEvent>;

export interface DODOFlashLoanEventObject {
  borrower: string;
  assetTo: string;
  baseAmount: BigNumber;
  quoteAmount: BigNumber;
}
export type DODOFlashLoanEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DODOFlashLoanEventObject
>;

export type DODOFlashLoanEventFilter = TypedEventFilter<DODOFlashLoanEvent>;

export interface DODOSwapEventObject {
  fromToken: string;
  toToken: string;
  fromAmount: BigNumber;
  toAmount: BigNumber;
  trader: string;
  receiver: string;
}
export type DODOSwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string],
  DODOSwapEventObject
>;

export type DODOSwapEventFilter = TypedEventFilter<DODOSwapEvent>;

export interface MintEventObject {
  user: string;
  value: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface RChangeEventObject {
  newRState: number;
}
export type RChangeEvent = TypedEvent<[number], RChangeEventObject>;

export type RChangeEventFilter = TypedEventFilter<RChangeEvent>;

export interface SellSharesEventObject {
  payer: string;
  to: string;
  decreaseShares: BigNumber;
  totalShares: BigNumber;
}
export type SellSharesEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SellSharesEventObject
>;

export type SellSharesEventFilter = TypedEventFilter<SellSharesEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DodoLiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DodoLiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    _BASE_PRICE_CUMULATIVE_LAST_(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _BASE_RESERVE_(overrides?: CallOverrides): Promise<[BigNumber]>;

    _BASE_TARGET_(overrides?: CallOverrides): Promise<[BigNumber]>;

    _BASE_TOKEN_(overrides?: CallOverrides): Promise<[string]>;

    _BLOCK_TIMESTAMP_LAST_(overrides?: CallOverrides): Promise<[number]>;

    _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<[boolean]>;

    _I_(overrides?: CallOverrides): Promise<[BigNumber]>;

    _K_(overrides?: CallOverrides): Promise<[BigNumber]>;

    _LP_FEE_RATE_(overrides?: CallOverrides): Promise<[BigNumber]>;

    _MAINTAINER_(overrides?: CallOverrides): Promise<[string]>;

    _MT_FEE_RATE_MODEL_(overrides?: CallOverrides): Promise<[string]>;

    _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<[BigNumber]>;

    _QUOTE_TARGET_(overrides?: CallOverrides): Promise<[BigNumber]>;

    _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<[string]>;

    _RState_(overrides?: CallOverrides): Promise<[number]>;

    addressToShortString(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    buyShares(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    correctRState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    flashLoan(
      baseAmount: PromiseOrValue<BigNumberish>,
      quoteAmount: PromiseOrValue<BigNumberish>,
      assetTo: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBaseInput(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { input: BigNumber }>;

    getMidPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { midPrice: BigNumber }>;

    getPMMState(
      overrides?: CallOverrides
    ): Promise<
      [PMMPricing.PMMStateStructOutput] & {
        state: PMMPricing.PMMStateStructOutput;
      }
    >;

    getPMMStateForCall(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        i: BigNumber;
        K: BigNumber;
        B: BigNumber;
        Q: BigNumber;
        B0: BigNumber;
        Q0: BigNumber;
        R: BigNumber;
      }
    >;

    getQuoteInput(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { input: BigNumber }>;

    getUserFeeRate(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lpFeeRate: BigNumber; mtFeeRate: BigNumber }
    >;

    getVaultReserve(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseReserve: BigNumber;
        quoteReserve: BigNumber;
      }
    >;

    init(
      maintainer: PromiseOrValue<string>,
      baseTokenAddress: PromiseOrValue<string>,
      quoteTokenAddress: PromiseOrValue<string>,
      lpFeeRate: PromiseOrValue<BigNumberish>,
      mtFeeRateModel: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      k: PromiseOrValue<BigNumberish>,
      isOpenTWAP: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    querySellBase(
      trader: PromiseOrValue<string>,
      payBaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveQuoteAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newBaseTarget: BigNumber;
      }
    >;

    querySellQuote(
      trader: PromiseOrValue<string>,
      payQuoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveBaseAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newQuoteTarget: BigNumber;
      }
    >;

    sellBase(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellQuote(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellShares(
      shareAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      baseMinAmount: PromiseOrValue<BigNumberish>,
      quoteMinAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  _BASE_PRICE_CUMULATIVE_LAST_(overrides?: CallOverrides): Promise<BigNumber>;

  _BASE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

  _BASE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

  _BASE_TOKEN_(overrides?: CallOverrides): Promise<string>;

  _BLOCK_TIMESTAMP_LAST_(overrides?: CallOverrides): Promise<number>;

  _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<boolean>;

  _I_(overrides?: CallOverrides): Promise<BigNumber>;

  _K_(overrides?: CallOverrides): Promise<BigNumber>;

  _LP_FEE_RATE_(overrides?: CallOverrides): Promise<BigNumber>;

  _MAINTAINER_(overrides?: CallOverrides): Promise<string>;

  _MT_FEE_RATE_MODEL_(overrides?: CallOverrides): Promise<string>;

  _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

  _QUOTE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

  _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<string>;

  _RState_(overrides?: CallOverrides): Promise<number>;

  addressToShortString(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyShares(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  correctRState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  flashLoan(
    baseAmount: PromiseOrValue<BigNumberish>,
    quoteAmount: PromiseOrValue<BigNumberish>,
    assetTo: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBaseInput(overrides?: CallOverrides): Promise<BigNumber>;

  getMidPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getPMMState(
    overrides?: CallOverrides
  ): Promise<PMMPricing.PMMStateStructOutput>;

  getPMMStateForCall(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      i: BigNumber;
      K: BigNumber;
      B: BigNumber;
      Q: BigNumber;
      B0: BigNumber;
      Q0: BigNumber;
      R: BigNumber;
    }
  >;

  getQuoteInput(overrides?: CallOverrides): Promise<BigNumber>;

  getUserFeeRate(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { lpFeeRate: BigNumber; mtFeeRate: BigNumber }
  >;

  getVaultReserve(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { baseReserve: BigNumber; quoteReserve: BigNumber }
  >;

  init(
    maintainer: PromiseOrValue<string>,
    baseTokenAddress: PromiseOrValue<string>,
    quoteTokenAddress: PromiseOrValue<string>,
    lpFeeRate: PromiseOrValue<BigNumberish>,
    mtFeeRateModel: PromiseOrValue<string>,
    i: PromiseOrValue<BigNumberish>,
    k: PromiseOrValue<BigNumberish>,
    isOpenTWAP: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  querySellBase(
    trader: PromiseOrValue<string>,
    payBaseAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      receiveQuoteAmount: BigNumber;
      mtFee: BigNumber;
      newRState: number;
      newBaseTarget: BigNumber;
    }
  >;

  querySellQuote(
    trader: PromiseOrValue<string>,
    payQuoteAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      receiveBaseAmount: BigNumber;
      mtFee: BigNumber;
      newRState: number;
      newQuoteTarget: BigNumber;
    }
  >;

  sellBase(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellQuote(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellShares(
    shareAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    baseMinAmount: PromiseOrValue<BigNumberish>,
    quoteMinAmount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  sync(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    _BASE_PRICE_CUMULATIVE_LAST_(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_TOKEN_(overrides?: CallOverrides): Promise<string>;

    _BLOCK_TIMESTAMP_LAST_(overrides?: CallOverrides): Promise<number>;

    _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<boolean>;

    _I_(overrides?: CallOverrides): Promise<BigNumber>;

    _K_(overrides?: CallOverrides): Promise<BigNumber>;

    _LP_FEE_RATE_(overrides?: CallOverrides): Promise<BigNumber>;

    _MAINTAINER_(overrides?: CallOverrides): Promise<string>;

    _MT_FEE_RATE_MODEL_(overrides?: CallOverrides): Promise<string>;

    _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<string>;

    _RState_(overrides?: CallOverrides): Promise<number>;

    addressToShortString(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyShares(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        baseInput: BigNumber;
        quoteInput: BigNumber;
      }
    >;

    correctRState(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    flashLoan(
      baseAmount: PromiseOrValue<BigNumberish>,
      quoteAmount: PromiseOrValue<BigNumberish>,
      assetTo: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBaseInput(overrides?: CallOverrides): Promise<BigNumber>;

    getMidPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPMMState(
      overrides?: CallOverrides
    ): Promise<PMMPricing.PMMStateStructOutput>;

    getPMMStateForCall(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        i: BigNumber;
        K: BigNumber;
        B: BigNumber;
        Q: BigNumber;
        B0: BigNumber;
        Q0: BigNumber;
        R: BigNumber;
      }
    >;

    getQuoteInput(overrides?: CallOverrides): Promise<BigNumber>;

    getUserFeeRate(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lpFeeRate: BigNumber; mtFeeRate: BigNumber }
    >;

    getVaultReserve(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseReserve: BigNumber;
        quoteReserve: BigNumber;
      }
    >;

    init(
      maintainer: PromiseOrValue<string>,
      baseTokenAddress: PromiseOrValue<string>,
      quoteTokenAddress: PromiseOrValue<string>,
      lpFeeRate: PromiseOrValue<BigNumberish>,
      mtFeeRateModel: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      k: PromiseOrValue<BigNumberish>,
      isOpenTWAP: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    querySellBase(
      trader: PromiseOrValue<string>,
      payBaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveQuoteAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newBaseTarget: BigNumber;
      }
    >;

    querySellQuote(
      trader: PromiseOrValue<string>,
      payQuoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveBaseAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newQuoteTarget: BigNumber;
      }
    >;

    sellBase(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellQuote(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellShares(
      shareAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      baseMinAmount: PromiseOrValue<BigNumberish>,
      quoteMinAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseAmount: BigNumber; quoteAmount: BigNumber }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null
    ): ApprovalEventFilter;

    "Burn(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      value?: null
    ): BurnEventFilter;
    Burn(user?: PromiseOrValue<string> | null, value?: null): BurnEventFilter;

    "BuyShares(address,uint256,uint256)"(
      to?: null,
      increaseShares?: null,
      totalShares?: null
    ): BuySharesEventFilter;
    BuyShares(
      to?: null,
      increaseShares?: null,
      totalShares?: null
    ): BuySharesEventFilter;

    "DODOFlashLoan(address,address,uint256,uint256)"(
      borrower?: null,
      assetTo?: null,
      baseAmount?: null,
      quoteAmount?: null
    ): DODOFlashLoanEventFilter;
    DODOFlashLoan(
      borrower?: null,
      assetTo?: null,
      baseAmount?: null,
      quoteAmount?: null
    ): DODOFlashLoanEventFilter;

    "DODOSwap(address,address,uint256,uint256,address,address)"(
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null,
      trader?: null,
      receiver?: null
    ): DODOSwapEventFilter;
    DODOSwap(
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null,
      trader?: null,
      receiver?: null
    ): DODOSwapEventFilter;

    "Mint(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      value?: null
    ): MintEventFilter;
    Mint(user?: PromiseOrValue<string> | null, value?: null): MintEventFilter;

    "RChange(uint8)"(newRState?: null): RChangeEventFilter;
    RChange(newRState?: null): RChangeEventFilter;

    "SellShares(address,address,uint256,uint256)"(
      payer?: null,
      to?: null,
      decreaseShares?: null,
      totalShares?: null
    ): SellSharesEventFilter;
    SellShares(
      payer?: null,
      to?: null,
      decreaseShares?: null,
      totalShares?: null
    ): SellSharesEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_PRICE_CUMULATIVE_LAST_(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_TOKEN_(overrides?: CallOverrides): Promise<BigNumber>;

    _BLOCK_TIMESTAMP_LAST_(overrides?: CallOverrides): Promise<BigNumber>;

    _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<BigNumber>;

    _I_(overrides?: CallOverrides): Promise<BigNumber>;

    _K_(overrides?: CallOverrides): Promise<BigNumber>;

    _LP_FEE_RATE_(overrides?: CallOverrides): Promise<BigNumber>;

    _MAINTAINER_(overrides?: CallOverrides): Promise<BigNumber>;

    _MT_FEE_RATE_MODEL_(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<BigNumber>;

    _RState_(overrides?: CallOverrides): Promise<BigNumber>;

    addressToShortString(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyShares(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    correctRState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    flashLoan(
      baseAmount: PromiseOrValue<BigNumberish>,
      quoteAmount: PromiseOrValue<BigNumberish>,
      assetTo: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBaseInput(overrides?: CallOverrides): Promise<BigNumber>;

    getMidPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPMMState(overrides?: CallOverrides): Promise<BigNumber>;

    getPMMStateForCall(overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteInput(overrides?: CallOverrides): Promise<BigNumber>;

    getUserFeeRate(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultReserve(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      maintainer: PromiseOrValue<string>,
      baseTokenAddress: PromiseOrValue<string>,
      quoteTokenAddress: PromiseOrValue<string>,
      lpFeeRate: PromiseOrValue<BigNumberish>,
      mtFeeRateModel: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      k: PromiseOrValue<BigNumberish>,
      isOpenTWAP: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    querySellBase(
      trader: PromiseOrValue<string>,
      payBaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    querySellQuote(
      trader: PromiseOrValue<string>,
      payQuoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellBase(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellQuote(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellShares(
      shareAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      baseMinAmount: PromiseOrValue<BigNumberish>,
      quoteMinAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _BASE_PRICE_CUMULATIVE_LAST_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _BASE_RESERVE_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _BASE_TARGET_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _BASE_TOKEN_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _BLOCK_TIMESTAMP_LAST_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _I_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _K_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _LP_FEE_RATE_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _MAINTAINER_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _MT_FEE_RATE_MODEL_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _QUOTE_TARGET_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _RState_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressToShortString(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyShares(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    correctRState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashLoan(
      baseAmount: PromiseOrValue<BigNumberish>,
      quoteAmount: PromiseOrValue<BigNumberish>,
      assetTo: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBaseInput(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMidPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPMMState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPMMStateForCall(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteInput(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserFeeRate(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      maintainer: PromiseOrValue<string>,
      baseTokenAddress: PromiseOrValue<string>,
      quoteTokenAddress: PromiseOrValue<string>,
      lpFeeRate: PromiseOrValue<BigNumberish>,
      mtFeeRateModel: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      k: PromiseOrValue<BigNumberish>,
      isOpenTWAP: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    querySellBase(
      trader: PromiseOrValue<string>,
      payBaseAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    querySellQuote(
      trader: PromiseOrValue<string>,
      payQuoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellBase(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellQuote(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellShares(
      shareAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      baseMinAmount: PromiseOrValue<BigNumberish>,
      quoteMinAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
